<%! from util import (activity_split, put_and, md_italic, split_camelcase_s)  %>\
<%namespace name="util" file="util.mako"/>\

<%def name="docs(c)">\
<%
    # fr == fattest resource, the fatter, the more important, right ?
    fr = None
    fr = sorted(schemas.values(), key=lambda s: (len(c.sta_map.get(s.id, [])), len(s.get('properties', []))), reverse=True)[0]

    # resouce -> [activity, ...]
    amap = dict()
    for an in c.fqan_map:
        resource, activity = activity_split(an)
        amap.setdefault(resource, list()).append(activity)
%>\
# Features

Handle the following *Resources* with ease ... 

% for r in sorted(amap.keys()):
* ${split_camelcase_s(r)} (${put_and(md_italic(sorted(amap[r])))})
% endfor

# Structure of this Library

The API is structured into the following primary items:

* **Hub**
    * a central object to maintain state and allow accessing all *Activities*
* **Resources**
    * primary types that you can apply *Activities* to
    * a collection of properties and *Parts*
    * **Parts**
        * a collection of properties
        * never directly used in *Activities*
* **Activities**
    * operations to apply to *Resources*

Generally speaking, you can invoke *Activities* like this:

```Rust,ignore
let r = hub.resource().activity(...).${api.terms.action}()
```

Or specifically ...

```ignore
% for an, a in c.sta_map[fr.id].iteritems():
<%
    resource, activity = activity_split(an)
%>\
let r = hub.${resource}().${activity}(...).${api.terms.action}()
% endfor
```

The `resource()` and `activity(...)` calls create [builders][builder-pattern]. The second one dealing with `Activities` 
supports various methods to configure the impending operation. It is made such that all required arguments have to be 
specified right away (i.e. `(...)`), whereas all optional ones can be [build up][builder-pattern] as desired.
The `${api.terms.action}()` method performs the actual communication with the server and returns the respective result.

# Usage (*TODO*)

${'##'} Instantiating the Hub

${'##'} About error handling

${'##'} About costumization

[builder-pattern]: http://en.wikipedia.org/wiki/Builder_pattern
[google-go-api]: https://github.com/google/google-api-go-client

</%def>

<%def name="license()">\
# License
The **${util.library_name()}** library was generated by ${put_and(copyright.authors)}, and is placed 
under the *${copyright.license_abbrev}* license.
You can read the full text at the repository's [license file][repo-license].

[repo-license]: ${cargo.repo_base_url + 'LICENSE.md'}
</%def>