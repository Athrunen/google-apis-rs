// DO NOT EDIT !
// This file was generated automatically from 'src/mako/cli/main.rs.mako'
// DO NOT EDIT !
#![feature(plugin, exit_status)]
#![plugin(docopt_macros)]
#![allow(unused_variables, unused_imports, dead_code, unused_mut)]

extern crate docopt;
extern crate yup_oauth2 as oauth2;
extern crate yup_hyper_mock as mock;
extern crate rustc_serialize;
extern crate serde;
extern crate hyper;
extern crate mime;
extern crate google_dfareporting2d1 as api;

use std::env;
use std::io::{self, Write};

docopt!(Options derive Debug, "
Usage: 
  dfareporting2d1 [options] account-active-ad-summaries get <profile-id> <summary-account-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-permission-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-permission-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-permissions get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-permissions list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-user-profiles get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-user-profiles insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-user-profiles list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-user-profiles patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] account-user-profiles update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] accounts get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] accounts list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] accounts patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] accounts update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] ads get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] ads insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] ads list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] ads patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] ads update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertiser-groups delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] advertiser-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertiser-groups insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertiser-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertiser-groups patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertiser-groups update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertisers get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertisers insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertisers list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertisers patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] advertisers update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] browsers list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaign-creative-associations insert <profile-id> <campaign-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaign-creative-associations list <profile-id> <campaign-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaigns get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaigns insert <profile-id> <default-landing-page-name> <default-landing-page-url> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaigns list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaigns patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] campaigns update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] change-logs get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] change-logs list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] cities list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] connection-types get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] connection-types list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] content-categories delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] content-categories get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] content-categories insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] content-categories list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] content-categories patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] content-categories update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] countries get <profile-id> <dart-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] countries list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-assets insert <profile-id> <advertiser-id> -r <kv>... -u (simple|resumable) <file> <mime> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-field-values delete <profile-id> <creative-field-id> <id> [-p <v>...]
  dfareporting2d1 [options] creative-field-values get <profile-id> <creative-field-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-field-values insert <profile-id> <creative-field-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-field-values list <profile-id> <creative-field-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-field-values patch <profile-id> <creative-field-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-field-values update <profile-id> <creative-field-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-fields delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] creative-fields get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-fields insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-fields list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-fields patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-fields update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-groups insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-groups patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creative-groups update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creatives get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creatives insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creatives list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creatives patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] creatives update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] dimension-values query <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] directory-site-contacts get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] directory-site-contacts list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] directory-sites get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] directory-sites insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] directory-sites list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] event-tags delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] event-tags get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] event-tags insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] event-tags list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] event-tags patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] event-tags update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] files get <report-id> <file-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] files list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] floodlight-activities generatetag <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activities update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activity-groups delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] floodlight-activity-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activity-groups insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activity-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activity-groups patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-activity-groups update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-configurations get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-configurations list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-configurations patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] floodlight-configurations update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] inventory-items get <profile-id> <project-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] inventory-items list <profile-id> <project-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] landing-pages delete <profile-id> <campaign-id> <id> [-p <v>...]
  dfareporting2d1 [options] landing-pages get <profile-id> <campaign-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] landing-pages insert <profile-id> <campaign-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] landing-pages list <profile-id> <campaign-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] landing-pages patch <profile-id> <campaign-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] landing-pages update <profile-id> <campaign-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] metros list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] mobile-carriers get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] mobile-carriers list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] operating-system-versions get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] operating-system-versions list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] operating-systems get <profile-id> <dart-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] operating-systems list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] order-documents get <profile-id> <project-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] order-documents list <profile-id> <project-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] orders get <profile-id> <project-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] orders list <profile-id> <project-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-groups insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-groups patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-groups update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-strategies delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] placement-strategies get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-strategies insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-strategies list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-strategies patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placement-strategies update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements generatetags <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] placements update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] platform-types get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] platform-types list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] postal-codes get <profile-id> <code> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] postal-codes list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] projects get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] projects list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] regions list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-list-shares get <profile-id> <remarketing-list-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-list-shares patch <profile-id> <remarketing-list-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-list-shares update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-lists get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-lists insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-lists list <profile-id> <advertiser-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-lists patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] remarketing-lists update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports compatible-fields-query <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports delete <profile-id> <report-id> [-p <v>...]
  dfareporting2d1 [options] reports files-get <profile-id> <report-id> <file-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports files-list <profile-id> <report-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports get <profile-id> <report-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports patch <profile-id> <report-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports run <profile-id> <report-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] reports update <profile-id> <report-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sites get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sites insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sites list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sites patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sites update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sizes get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sizes insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] sizes list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] subaccounts get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] subaccounts insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] subaccounts list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] subaccounts patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] subaccounts update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] targetable-remarketing-lists get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] targetable-remarketing-lists list <profile-id> <advertiser-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-profiles get <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-profiles list [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-role-permission-groups get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-role-permission-groups list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-role-permissions get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-role-permissions list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-roles delete <profile-id> <id> [-p <v>...]
  dfareporting2d1 [options] user-roles get <profile-id> <id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-roles insert <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-roles list <profile-id> [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-roles patch <profile-id> <id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 [options] user-roles update <profile-id> -r <kv>... [-p <v>...] [-o <out>]
  dfareporting2d1 --help

All documentation details can be found at
http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/index.html

Configuration:
  --scope <url>  
            Specify the authentication a method should be executed in. Each scope 
            requires the user to grant this application permission to use it.
            If unset, it defaults to the shortest scope url for a particular method.
  --config-dir <folder>
            A directory into which we will store our persistent data. Defaults to 
            a user-writable directory that we will create during the first invocation.
            [default: ~/.google-service-cli]
  --debug
            Output all server communication to standard error. `tx` and `rx` are placed 
            into the same stream.
  --debug-auth
            Output all communication related to authentication to standard error. `tx` 
            and `rx` are placed into the same stream.
");

mod cmn;
use cmn::{InvalidOptionsError, CLIError, JsonTokenStorage, arg_from_str, writer_from_opts, parse_kv_arg, 
          input_file_from_opts, input_mime_from_opts, FieldCursor, FieldError};

use std::default::Default;
use std::str::FromStr;

use oauth2::{Authenticator, DefaultAuthenticatorDelegate};
use rustc_serialize::json;

struct Engine {
    opt: Options,
    hub: api::Dfareporting<hyper::Client, Authenticator<DefaultAuthenticatorDelegate, JsonTokenStorage, hyper::Client>>,
}


impl Engine {
    fn _account_active_ad_summaries_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_active_ad_summaries().get(&self.opt.arg_profile_id, &self.opt.arg_summary_account_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_permission_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_permission_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_permission_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_permission_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_permissions_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_permissions().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_permissions_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_permissions().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_user_profiles_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_user_profiles().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_user_profiles_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_user_profiles_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.account_user_profiles().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "user-role-id" => {
                    call = call.user_role_id(value.unwrap_or(""));
                },
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_user_profiles_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _account_user_profiles_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _accounts_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.accounts().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _accounts_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.accounts().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _accounts_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Account::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_reports_configuration_init(request: &mut api::Account) {
                if request.reports_configuration.is_none() {
                    request.reports_configuration = Some(Default::default());
                }
            }
            
            fn request_reports_configuration_lookback_configuration_init(request: &mut api::Account) {
                request_reports_configuration_init(request);
                if request.reports_configuration.as_mut().unwrap().lookback_configuration.is_none() {
                    request.reports_configuration.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "teaser-size-limit" => {
                        request.teaser_size_limit = Some(value.unwrap_or("").to_string());
                    },
                "active-view-opt-out" => {
                        request.active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "active-view-opt-out", "boolean"));
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "maximum-image-size" => {
                        request.maximum_image_size = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "default-creative-size-id" => {
                        request.default_creative_size_id = Some(value.unwrap_or("").to_string());
                    },
                "account-permission-ids" => {
                        if request.account_permission_ids.is_none() {
                           request.account_permission_ids = Some(Default::default());
                        }
                                        request.account_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "account-profile" => {
                        request.account_profile = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "nielsen-ocr-enabled" => {
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "reports-configuration.report-generation-time-zone-id" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().report_generation_time_zone_id = Some(value.unwrap_or("").to_string());
                    },
                "reports-configuration.exposure-to-conversion-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "reports-configuration.exposure-to-conversion-enabled", "boolean"));
                    },
                "reports-configuration.lookback-configuration.click-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.click-duration", "integer"));
                    },
                "reports-configuration.lookback-configuration.post-impression-activities-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "currency-id" => {
                        request_reports_configuration_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_reports_configuration_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "comscore-vce-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "active-ads-limit-tier" => {
                        request_reports_configuration_init(&mut request);
                        request.active_ads_limit_tier = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_reports_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request_reports_configuration_init(&mut request);
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        request_reports_configuration_init(&mut request);
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.accounts().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _accounts_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Account::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_reports_configuration_init(request: &mut api::Account) {
                if request.reports_configuration.is_none() {
                    request.reports_configuration = Some(Default::default());
                }
            }
            
            fn request_reports_configuration_lookback_configuration_init(request: &mut api::Account) {
                request_reports_configuration_init(request);
                if request.reports_configuration.as_mut().unwrap().lookback_configuration.is_none() {
                    request.reports_configuration.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "teaser-size-limit" => {
                        request.teaser_size_limit = Some(value.unwrap_or("").to_string());
                    },
                "active-view-opt-out" => {
                        request.active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "active-view-opt-out", "boolean"));
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "maximum-image-size" => {
                        request.maximum_image_size = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "default-creative-size-id" => {
                        request.default_creative_size_id = Some(value.unwrap_or("").to_string());
                    },
                "account-permission-ids" => {
                        if request.account_permission_ids.is_none() {
                           request.account_permission_ids = Some(Default::default());
                        }
                                        request.account_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "account-profile" => {
                        request.account_profile = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "nielsen-ocr-enabled" => {
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "reports-configuration.report-generation-time-zone-id" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().report_generation_time_zone_id = Some(value.unwrap_or("").to_string());
                    },
                "reports-configuration.exposure-to-conversion-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "reports-configuration.exposure-to-conversion-enabled", "boolean"));
                    },
                "reports-configuration.lookback-configuration.click-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.click-duration", "integer"));
                    },
                "reports-configuration.lookback-configuration.post-impression-activities-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "currency-id" => {
                        request_reports_configuration_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_reports_configuration_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "comscore-vce-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "active-ads-limit-tier" => {
                        request_reports_configuration_init(&mut request);
                        request.active_ads_limit_tier = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_reports_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request_reports_configuration_init(&mut request);
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        request_reports_configuration_init(&mut request);
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.accounts().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _ads_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.ads().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _ads_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.ads().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _ads_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.ads().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "type" => {
                    call = call.add_type(value.unwrap_or(""));
                },
                "ssl-required" => {
                    call = call.ssl_required(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                },
                "ssl-compliant" => {
                    call = call.ssl_compliant(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "remarketing-list-ids" => {
                    call = call.add_remarketing_list_ids(value.unwrap_or(""));
                },
                "placement-ids" => {
                    call = call.add_placement_ids(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "overridden-event-tag-id" => {
                    call = call.overridden_event_tag_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "landing-page-ids" => {
                    call = call.add_landing_page_ids(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "dynamic-click-tracker" => {
                    call = call.dynamic_click_tracker(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                },
                "creative-type" => {
                    call = call.creative_type(value.unwrap_or(""));
                },
                "creative-optimization-configuration-ids" => {
                    call = call.add_creative_optimization_configuration_ids(value.unwrap_or(""));
                },
                "creative-ids" => {
                    call = call.add_creative_ids(value.unwrap_or(""));
                },
                "compatibility" => {
                    call = call.compatibility(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "audience-segment-ids" => {
                    call = call.add_audience_segment_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _ads_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.ads().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _ads_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.ads().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertiser_groups_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.advertiser_groups().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _advertiser_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.advertiser_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertiser_groups_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertiser_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.advertiser_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertiser_groups_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertiser_groups_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertisers_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.advertisers().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertisers_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertisers().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertisers_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.advertisers().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "status" => {
                    call = call.status(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "only-parent" => {
                    call = call.only_parent(arg_from_str(value.unwrap_or("false"), err, "only-parent", "boolean"));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "include-advertisers-without-groups-only" => {
                    call = call.include_advertisers_without_groups_only(arg_from_str(value.unwrap_or("false"), err, "include-advertisers-without-groups-only", "boolean"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-ids" => {
                    call = call.add_floodlight_configuration_ids(value.unwrap_or(""));
                },
                "advertiser-group-ids" => {
                    call = call.add_advertiser_group_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertisers_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertisers().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _advertisers_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.advertisers().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _browsers_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.browsers().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaign_creative_associations_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CampaignCreativeAssociation::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "creative-id" => {
                        request.creative_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.campaign_creative_associations().insert(request, &self.opt.arg_profile_id, &self.opt.arg_campaign_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaign_creative_associations_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.campaign_creative_associations().list(&self.opt.arg_profile_id, &self.opt.arg_campaign_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaigns_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.campaigns().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaigns_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.campaigns().insert(request, &self.opt.arg_profile_id, &self.opt.arg_default_landing_page_name, &self.opt.arg_default_landing_page_url);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaigns_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.campaigns().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "overridden-event-tag-id" => {
                    call = call.overridden_event_tag_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "excluded-ids" => {
                    call = call.add_excluded_ids(value.unwrap_or(""));
                },
                "at-least-one-optimization-activity" => {
                    call = call.at_least_one_optimization_activity(arg_from_str(value.unwrap_or("false"), err, "at-least-one-optimization-activity", "boolean"));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "advertiser-group-ids" => {
                    call = call.add_advertiser_group_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaigns_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.campaigns().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _campaigns_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.campaigns().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _change_logs_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.change_logs().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _change_logs_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.change_logs().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "user-profile-ids" => {
                    call = call.add_user_profile_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "object-type" => {
                    call = call.object_type(value.unwrap_or(""));
                },
                "object-ids" => {
                    call = call.add_object_ids(value.unwrap_or(""));
                },
                "min-change-time" => {
                    call = call.min_change_time(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "max-change-time" => {
                    call = call.max_change_time(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "action" => {
                    call = call.action(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _cities_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.cities().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "region-dart-ids" => {
                    call = call.add_region_dart_ids(value.unwrap_or(""));
                },
                "name-prefix" => {
                    call = call.name_prefix(value.unwrap_or(""));
                },
                "dart-ids" => {
                    call = call.add_dart_ids(value.unwrap_or(""));
                },
                "country-dart-ids" => {
                    call = call.add_country_dart_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _connection_types_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.connection_types().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _connection_types_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.connection_types().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _content_categories_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.content_categories().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _content_categories_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.content_categories().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _content_categories_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.content_categories().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _content_categories_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.content_categories().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _content_categories_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.content_categories().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _content_categories_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.content_categories().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _countries_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.countries().get(&self.opt.arg_profile_id, &self.opt.arg_dart_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _countries_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.countries().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_assets_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeAssetMetadata::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_asset_identifier_init(request: &mut api::CreativeAssetMetadata) {
                if request.asset_identifier.is_none() {
                    request.asset_identifier = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "warned-validation-rules" => {
                        if request.warned_validation_rules.is_none() {
                           request.warned_validation_rules = Some(Default::default());
                        }
                                        request.warned_validation_rules.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "detected-features" => {
                        if request.detected_features.is_none() {
                           request.detected_features = Some(Default::default());
                        }
                                        request.detected_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "asset-identifier.type" => {
                        request_asset_identifier_init(&mut request);
                        request.asset_identifier.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "asset-identifier.name" => {
                        request_asset_identifier_init(&mut request);
                        request.asset_identifier.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_assets().insert(request, &self.opt.arg_profile_id, &self.opt.arg_advertiser_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = 
            if self.opt.cmd_simple {
                "simple"
            } else if self.opt.cmd_resumable {
                "resumable"
            } else { 
                unreachable!() 
            };
        let mut input_file = input_file_from_opts(&self.opt.arg_file, err);
        let mime_type = input_mime_from_opts(&self.opt.arg_mime, err);
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "simple" => call.upload(input_file.unwrap(), mime_type.unwrap()),
                "resumable" => call.upload_resumable(input_file.unwrap(), mime_type.unwrap()),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_field_values_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_field_values().delete(&self.opt.arg_profile_id, &self.opt.arg_creative_field_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _creative_field_values_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_field_values().get(&self.opt.arg_profile_id, &self.opt.arg_creative_field_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_field_values_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_field_values().insert(request, &self.opt.arg_profile_id, &self.opt.arg_creative_field_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_field_values_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_field_values().list(&self.opt.arg_profile_id, &self.opt.arg_creative_field_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_field_values_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_field_values().patch(request, &self.opt.arg_profile_id, &self.opt.arg_creative_field_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_field_values_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_field_values().update(request, &self.opt.arg_profile_id, &self.opt.arg_creative_field_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_fields_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_fields().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _creative_fields_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_fields().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_fields_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_fields().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_fields_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_fields().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_fields_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_fields().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_fields_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_fields().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_groups_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_groups().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creative_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "group-number" => {
                    call = call.group_number(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_groups_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_groups().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creative_groups_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creative_groups().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creatives_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creatives().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creatives_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creatives().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creatives_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.creatives().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "types" => {
                    call = call.add_types(value.unwrap_or(""));
                },
                "studio-creative-id" => {
                    call = call.studio_creative_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "rendering-ids" => {
                    call = call.add_rendering_ids(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "creative-field-ids" => {
                    call = call.add_creative_field_ids(value.unwrap_or(""));
                },
                "companion-creative-ids" => {
                    call = call.add_companion_creative_ids(value.unwrap_or(""));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creatives_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creatives().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _creatives_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.creatives().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _dimension_values_query(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::DimensionValueRequest::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "dimension-name" => {
                        request.dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.dimension_values().query(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _directory_site_contacts_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.directory_site_contacts().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _directory_site_contacts_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.directory_site_contacts().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _directory_sites_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.directory_sites().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _directory_sites_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::DirectorySite::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_id_dimension_value_init(request: &mut api::DirectorySite) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_settings_dfp_settings_init(request: &mut api::DirectorySite) {
                request_settings_init(request);
                if request.settings.as_mut().unwrap().dfp_settings.is_none() {
                    request.settings.as_mut().unwrap().dfp_settings = Some(Default::default());
                }
            }
            
            fn request_settings_init(request: &mut api::DirectorySite) {
                if request.settings.is_none() {
                    request.settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "settings.nielsen-ocr-opt-out" => {
                        request_settings_init(&mut request);
                        request.settings.as_mut().unwrap().nielsen_ocr_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.nielsen-ocr-opt-out", "boolean"));
                    },
                "settings.active-view-opt-out" => {
                        request_settings_init(&mut request);
                        request.settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.active-view-opt-out", "boolean"));
                    },
                "settings.dfp-settings.dfp-network-name" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().dfp_network_name = Some(value.unwrap_or("").to_string());
                    },
                "settings.dfp-settings.publisher-portal-only" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().publisher_portal_only = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.publisher-portal-only", "boolean"));
                    },
                "settings.dfp-settings.programmatic-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().programmatic_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.programmatic-placement-accepted", "boolean"));
                    },
                "settings.dfp-settings.pub-paid-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().pub_paid_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.pub-paid-placement-accepted", "boolean"));
                    },
                "settings.dfp-settings.dfp-network-code" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().dfp_network_code = Some(value.unwrap_or("").to_string());
                    },
                "settings.verification-tag-opt-out" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().verification_tag_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.verification-tag-opt-out", "boolean"));
                    },
                "settings.instream-video-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().instream_video_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.instream-video-placement-accepted", "boolean"));
                    },
                "settings.interstitial-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().interstitial_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.interstitial-placement-accepted", "boolean"));
                    },
                "settings.video-active-view-opt-out" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().video_active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.video-active-view-opt-out", "boolean"));
                    },
                "currency-id" => {
                        request_settings_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "inpage-tag-formats" => {
                        request_settings_init(&mut request);
                        if request.inpage_tag_formats.is_none() {
                           request.inpage_tag_formats = Some(Default::default());
                        }
                                        request.inpage_tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request_settings_init(&mut request);
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "parent-id" => {
                        request_settings_init(&mut request);
                        request.parent_id = Some(value.unwrap_or("").to_string());
                    },
                "interstitial-tag-formats" => {
                        request_settings_init(&mut request);
                        if request.interstitial_tag_formats.is_none() {
                           request.interstitial_tag_formats = Some(Default::default());
                        }
                                        request.interstitial_tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.directory_sites().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _directory_sites_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.directory_sites().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "parent-id" => {
                    call = call.parent_id(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "dfp-network-code" => {
                    call = call.dfp_network_code(value.unwrap_or(""));
                },
                "country-id" => {
                    call = call.country_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "accepts-publisher-paid-placements" => {
                    call = call.accepts_publisher_paid_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-publisher-paid-placements", "boolean"));
                },
                "accepts-interstitial-placements" => {
                    call = call.accepts_interstitial_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-interstitial-placements", "boolean"));
                },
                "accepts-in-stream-video-placements" => {
                    call = call.accepts_in_stream_video_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-in-stream-video-placements", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _event_tags_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.event_tags().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _event_tags_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.event_tags().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _event_tags_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.event_tags().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _event_tags_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.event_tags().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "event-tag-types" => {
                    call = call.add_event_tag_types(value.unwrap_or(""));
                },
                "enabled" => {
                    call = call.enabled(arg_from_str(value.unwrap_or("false"), err, "enabled", "boolean"));
                },
                "definitions-only" => {
                    call = call.definitions_only(arg_from_str(value.unwrap_or("false"), err, "definitions-only", "boolean"));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "ad-id" => {
                    call = call.ad_id(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _event_tags_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.event_tags().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _event_tags_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.event_tags().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _files_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut download_mode = false;
        let mut call = self.hub.files().get(&self.opt.arg_report_id, &self.opt.arg_file_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    if key == "alt" && value.unwrap_or("unset") == "media" {
                        download_mode = true;
                    }
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    if !download_mode {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    } else {
                    io::copy(&mut response, &mut ostream).unwrap();
                    }
                    None
                }
            }
        }
    }

    fn _files_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.files().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "scope" => {
                    call = call.scope(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activities().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _floodlight_activities_generatetag(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activities().generatetag(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "floodlight-activity-id" => {
                    call = call.floodlight_activity_id(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activities().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activities().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "tag-string" => {
                    call = call.tag_string(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-id" => {
                    call = call.floodlight_configuration_id(value.unwrap_or(""));
                },
                "floodlight-activity-group-type" => {
                    call = call.floodlight_activity_group_type(value.unwrap_or(""));
                },
                "floodlight-activity-group-tag-string" => {
                    call = call.floodlight_activity_group_tag_string(value.unwrap_or(""));
                },
                "floodlight-activity-group-name" => {
                    call = call.floodlight_activity_group_name(value.unwrap_or(""));
                },
                "floodlight-activity-group-ids" => {
                    call = call.add_floodlight_activity_group_ids(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activities_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activity_groups().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activity_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_activity_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "type" => {
                    call = call.type_(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-id" => {
                    call = call.floodlight_configuration_id(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_activity_groups_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_configurations_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_configurations().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_configurations_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.floodlight_configurations().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_configurations_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightConfiguration::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::FloodlightConfiguration) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_omniture_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.omniture_settings.is_none() {
                    request.omniture_settings = Some(Default::default());
                }
            }
            
            fn request_tag_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.tag_settings.is_none() {
                    request.tag_settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "natural-search-conversion-attribution-option" => {
                        request.natural_search_conversion_attribution_option = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "exposure-to-conversion-enabled" => {
                        request.exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "exposure-to-conversion-enabled", "boolean"));
                    },
                "analytics-data-sharing-enabled" => {
                        request.analytics_data_sharing_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "analytics-data-sharing-enabled", "boolean"));
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "first-day-of-week" => {
                        request_lookback_configuration_init(&mut request);
                        request.first_day_of_week = Some(value.unwrap_or("").to_string());
                    },
                "standard-variable-types" => {
                        request_lookback_configuration_init(&mut request);
                        if request.standard_variable_types.is_none() {
                           request.standard_variable_types = Some(Default::default());
                        }
                                        request.standard_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "omniture-settings.omniture-cost-data-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_cost_data_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-cost-data-enabled", "boolean"));
                    },
                "omniture-settings.omniture-integration-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_integration_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-integration-enabled", "boolean"));
                    },
                "subaccount-id" => {
                        request_omniture_settings_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_omniture_settings_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "tag-settings.dynamic-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().dynamic_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.dynamic-tag-enabled", "boolean"));
                    },
                "tag-settings.image-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.image-tag-enabled", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_configurations().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _floodlight_configurations_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::FloodlightConfiguration::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::FloodlightConfiguration) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_omniture_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.omniture_settings.is_none() {
                    request.omniture_settings = Some(Default::default());
                }
            }
            
            fn request_tag_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.tag_settings.is_none() {
                    request.tag_settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "natural-search-conversion-attribution-option" => {
                        request.natural_search_conversion_attribution_option = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "exposure-to-conversion-enabled" => {
                        request.exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "exposure-to-conversion-enabled", "boolean"));
                    },
                "analytics-data-sharing-enabled" => {
                        request.analytics_data_sharing_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "analytics-data-sharing-enabled", "boolean"));
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "first-day-of-week" => {
                        request_lookback_configuration_init(&mut request);
                        request.first_day_of_week = Some(value.unwrap_or("").to_string());
                    },
                "standard-variable-types" => {
                        request_lookback_configuration_init(&mut request);
                        if request.standard_variable_types.is_none() {
                           request.standard_variable_types = Some(Default::default());
                        }
                                        request.standard_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "omniture-settings.omniture-cost-data-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_cost_data_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-cost-data-enabled", "boolean"));
                    },
                "omniture-settings.omniture-integration-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_integration_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-integration-enabled", "boolean"));
                    },
                "subaccount-id" => {
                        request_omniture_settings_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_omniture_settings_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "tag-settings.dynamic-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().dynamic_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.dynamic-tag-enabled", "boolean"));
                    },
                "tag-settings.image-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.image-tag-enabled", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.floodlight_configurations().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _inventory_items_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.inventory_items().get(&self.opt.arg_profile_id, &self.opt.arg_project_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _inventory_items_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.inventory_items().list(&self.opt.arg_profile_id, &self.opt.arg_project_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "order-id" => {
                    call = call.add_order_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "in-plan" => {
                    call = call.in_plan(arg_from_str(value.unwrap_or("false"), err, "in-plan", "boolean"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _landing_pages_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.landing_pages().delete(&self.opt.arg_profile_id, &self.opt.arg_campaign_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _landing_pages_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.landing_pages().get(&self.opt.arg_profile_id, &self.opt.arg_campaign_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _landing_pages_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.landing_pages().insert(request, &self.opt.arg_profile_id, &self.opt.arg_campaign_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _landing_pages_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.landing_pages().list(&self.opt.arg_profile_id, &self.opt.arg_campaign_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _landing_pages_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.landing_pages().patch(request, &self.opt.arg_profile_id, &self.opt.arg_campaign_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _landing_pages_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.landing_pages().update(request, &self.opt.arg_profile_id, &self.opt.arg_campaign_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _metros_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.metros().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _mobile_carriers_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.mobile_carriers().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _mobile_carriers_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.mobile_carriers().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _operating_system_versions_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.operating_system_versions().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _operating_system_versions_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.operating_system_versions().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _operating_systems_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.operating_systems().get(&self.opt.arg_profile_id, &self.opt.arg_dart_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _operating_systems_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.operating_systems().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _order_documents_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.order_documents().get(&self.opt.arg_profile_id, &self.opt.arg_project_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _order_documents_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.order_documents().list(&self.opt.arg_profile_id, &self.opt.arg_project_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "order-id" => {
                    call = call.add_order_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "approved" => {
                    call = call.approved(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _orders_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.orders().get(&self.opt.arg_profile_id, &self.opt.arg_project_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _orders_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.orders().list(&self.opt.arg_profile_id, &self.opt.arg_project_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placement_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_groups_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_groups().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placement_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-ids" => {
                    call = call.add_site_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "pricing-types" => {
                    call = call.add_pricing_types(value.unwrap_or(""));
                },
                "placement-strategy-ids" => {
                    call = call.add_placement_strategy_ids(value.unwrap_or(""));
                },
                "placement-group-type" => {
                    call = call.placement_group_type(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "content-category-ids" => {
                    call = call.add_content_category_ids(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_groups_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_groups().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_groups_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_groups().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_strategies_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placement_strategies().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _placement_strategies_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placement_strategies().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_strategies_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_strategies().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_strategies_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placement_strategies().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_strategies_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_strategies().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placement_strategies_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placement_strategies().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_generatetags(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placements().generatetags(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "tag-formats" => {
                    call = call.add_tag_formats(value.unwrap_or(""));
                },
                "placement-ids" => {
                    call = call.add_placement_ids(value.unwrap_or(""));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placements().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placements().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.placements().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "site-ids" => {
                    call = call.add_site_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "pricing-types" => {
                    call = call.add_pricing_types(value.unwrap_or(""));
                },
                "placement-strategy-ids" => {
                    call = call.add_placement_strategy_ids(value.unwrap_or(""));
                },
                "payment-source" => {
                    call = call.payment_source(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "group-ids" => {
                    call = call.add_group_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "content-category-ids" => {
                    call = call.add_content_category_ids(value.unwrap_or(""));
                },
                "compatibilities" => {
                    call = call.add_compatibilities(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placements().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _placements_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.placements().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _platform_types_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.platform_types().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _platform_types_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.platform_types().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _postal_codes_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.postal_codes().get(&self.opt.arg_profile_id, &self.opt.arg_code);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _postal_codes_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.postal_codes().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _projects_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.projects().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _projects_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.projects().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _regions_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.regions().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_list_shares_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.remarketing_list_shares().get(&self.opt.arg_profile_id, &self.opt.arg_remarketing_list_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_list_shares_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::RemarketingListShare::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "shared-advertiser-ids" => {
                        if request.shared_advertiser_ids.is_none() {
                           request.shared_advertiser_ids = Some(Default::default());
                        }
                                        request.shared_advertiser_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-id" => {
                        request.remarketing_list_id = Some(value.unwrap_or("").to_string());
                    },
                "shared-account-ids" => {
                        if request.shared_account_ids.is_none() {
                           request.shared_account_ids = Some(Default::default());
                        }
                                        request.shared_account_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.remarketing_list_shares().patch(request, &self.opt.arg_profile_id, &self.opt.arg_remarketing_list_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_list_shares_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::RemarketingListShare::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "shared-advertiser-ids" => {
                        if request.shared_advertiser_ids.is_none() {
                           request.shared_advertiser_ids = Some(Default::default());
                        }
                                        request.shared_advertiser_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-id" => {
                        request.remarketing_list_id = Some(value.unwrap_or("").to_string());
                    },
                "shared-account-ids" => {
                        if request.shared_account_ids.is_none() {
                           request.shared_account_ids = Some(Default::default());
                        }
                                        request.shared_account_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.remarketing_list_shares().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_lists_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.remarketing_lists().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_lists_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_lists_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.remarketing_lists().list(&self.opt.arg_profile_id, &self.opt.arg_advertiser_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "name" => {
                    call = call.name(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "floodlight-activity-id" => {
                    call = call.floodlight_activity_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_lists_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _remarketing_lists_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_compatible_fields_query(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.reports().compatible_fields_query(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.reports().delete(&self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _reports_files_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut download_mode = false;
        let mut call = self.hub.reports().files_get(&self.opt.arg_profile_id, &self.opt.arg_report_id, &self.opt.arg_file_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    if key == "alt" && value.unwrap_or("unset") == "media" {
                        download_mode = true;
                    }
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    if !download_mode {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    } else {
                    io::copy(&mut response, &mut ostream).unwrap();
                    }
                    None
                }
            }
        }
    }

    fn _reports_files_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.reports().files_list(&self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.reports().get(&self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.reports().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.reports().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "scope" => {
                    call = call.scope(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.reports().patch(request, &self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_run(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.reports().run(&self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "synchronous" => {
                    call = call.synchronous(arg_from_str(value.unwrap_or("false"), err, "synchronous", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _reports_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.reports().update(request, &self.opt.arg_profile_id, &self.opt.arg_report_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sites_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.sites().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sites_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.sites().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sites_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.sites().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "unmapped-site" => {
                    call = call.unmapped_site(arg_from_str(value.unwrap_or("false"), err, "unmapped-site", "boolean"));
                },
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "approved" => {
                    call = call.approved(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                },
                "ad-words-site" => {
                    call = call.ad_words_site(arg_from_str(value.unwrap_or("false"), err, "ad-words-site", "boolean"));
                },
                "accepts-publisher-paid-placements" => {
                    call = call.accepts_publisher_paid_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-publisher-paid-placements", "boolean"));
                },
                "accepts-interstitial-placements" => {
                    call = call.accepts_interstitial_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-interstitial-placements", "boolean"));
                },
                "accepts-in-stream-video-placements" => {
                    call = call.accepts_in_stream_video_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-in-stream-video-placements", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sites_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.sites().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sites_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.sites().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sizes_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.sizes().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sizes_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Size::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "width" => {
                        request.width = Some(arg_from_str(value.unwrap_or("-0"), err, "width", "integer"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "iab" => {
                        request.iab = Some(arg_from_str(value.unwrap_or("false"), err, "iab", "boolean"));
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "height" => {
                        request.height = Some(arg_from_str(value.unwrap_or("-0"), err, "height", "integer"));
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.sizes().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _sizes_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.sizes().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "width" => {
                    call = call.width(arg_from_str(value.unwrap_or("-0"), err, "width", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "iab-standard" => {
                    call = call.iab_standard(arg_from_str(value.unwrap_or("false"), err, "iab-standard", "boolean"));
                },
                "height" => {
                    call = call.height(arg_from_str(value.unwrap_or("-0"), err, "height", "integer"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _subaccounts_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.subaccounts().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _subaccounts_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.subaccounts().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _subaccounts_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.subaccounts().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _subaccounts_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.subaccounts().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _subaccounts_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.subaccounts().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _targetable_remarketing_lists_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.targetable_remarketing_lists().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _targetable_remarketing_lists_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.targetable_remarketing_lists().list(&self.opt.arg_profile_id, &self.opt.arg_advertiser_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "name" => {
                    call = call.name(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_profiles_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_profiles().get(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_profiles_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_profiles().list();
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_role_permission_groups_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_role_permission_groups().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_role_permission_groups_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_role_permission_groups().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_role_permissions_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_role_permissions().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_role_permissions_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_role_permissions().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_roles_delete(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_roles().delete(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok(mut response) => {
                    None
                }
            }
        }
    }

    fn _user_roles_get(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_roles().get(&self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_roles_insert(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.user_roles().insert(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_roles_list(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        let mut call = self.hub.user_roles().list(&self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "account-user-role-only" => {
                    call = call.account_user_role_only(arg_from_str(value.unwrap_or("false"), err, "account-user-role-only", "boolean"));
                },
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_roles_patch(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.user_roles().patch(request, &self.opt.arg_profile_id, &self.opt.arg_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _user_roles_update(&self, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Option<api::Error> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in self.opt.arg_kv.iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string())));
                }
            }
        }
        let mut call = self.hub.user_roles().update(request, &self.opt.arg_profile_id);
        for parg in self.opt.arg_v.iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "alt"
                |"fields"
                |"key"
                |"oauth-token"
                |"pretty-print"
                |"quota-user"
                |"user-ip" => {
                    let map = [
                        ("oauth-token", "oauth_token"),
                        ("pretty-print", "prettyPrint"),
                        ("quota-user", "quotaUser"),
                        ("user-ip", "userIp"),
                    ];
                    call = call.param(map.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"))
                },
                _ => err.issues.push(CLIError::UnknownParameter(key.to_string())),
            }
        }
        let protocol = "standard-request";
        if dry_run {
            None
        } else {
            assert!(err.issues.len() == 0);
            if self.opt.flag_scope.len() > 0 {
                call = call.add_scope(&self.opt.flag_scope);
            }
            let mut ostream = writer_from_opts(self.opt.flag_o, &self.opt.arg_out);
            match match protocol {
                "standard-request" => call.doit(),
                _ => unreachable!(),
            } {
                Err(api_err) => Some(api_err),
                Ok((mut response, output_schema)) => {
                    serde::json::to_writer_pretty(&mut ostream, &output_schema).unwrap();
                    None
                }
            }
        }
    }

    fn _doit(&self, dry_run: bool) -> (Option<api::Error>, Option<InvalidOptionsError>) {
        let mut err = InvalidOptionsError::new();
        let mut call_result: Option<api::Error>;
        let mut err_opt: Option<InvalidOptionsError> = None;

        if self.opt.cmd_account_active_ad_summaries {
            if self.opt.cmd_get {
                call_result = self._account_active_ad_summaries_get(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_account_permission_groups {
            if self.opt.cmd_get {
                call_result = self._account_permission_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._account_permission_groups_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_account_permissions {
            if self.opt.cmd_get {
                call_result = self._account_permissions_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._account_permissions_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_account_user_profiles {
            if self.opt.cmd_get {
                call_result = self._account_user_profiles_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._account_user_profiles_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._account_user_profiles_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._account_user_profiles_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._account_user_profiles_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_accounts {
            if self.opt.cmd_get {
                call_result = self._accounts_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._accounts_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._accounts_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._accounts_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_ads {
            if self.opt.cmd_get {
                call_result = self._ads_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._ads_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._ads_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._ads_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._ads_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_advertiser_groups {
            if self.opt.cmd_delete {
                call_result = self._advertiser_groups_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._advertiser_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._advertiser_groups_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._advertiser_groups_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._advertiser_groups_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._advertiser_groups_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_advertisers {
            if self.opt.cmd_get {
                call_result = self._advertisers_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._advertisers_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._advertisers_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._advertisers_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._advertisers_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_browsers {
            if self.opt.cmd_list {
                call_result = self._browsers_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_campaign_creative_associations {
            if self.opt.cmd_insert {
                call_result = self._campaign_creative_associations_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._campaign_creative_associations_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_campaigns {
            if self.opt.cmd_get {
                call_result = self._campaigns_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._campaigns_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._campaigns_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._campaigns_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._campaigns_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_change_logs {
            if self.opt.cmd_get {
                call_result = self._change_logs_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._change_logs_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_cities {
            if self.opt.cmd_list {
                call_result = self._cities_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_connection_types {
            if self.opt.cmd_get {
                call_result = self._connection_types_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._connection_types_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_content_categories {
            if self.opt.cmd_delete {
                call_result = self._content_categories_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._content_categories_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._content_categories_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._content_categories_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._content_categories_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._content_categories_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_countries {
            if self.opt.cmd_get {
                call_result = self._countries_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._countries_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_creative_assets {
            if self.opt.cmd_insert {
                call_result = self._creative_assets_insert(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_creative_field_values {
            if self.opt.cmd_delete {
                call_result = self._creative_field_values_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._creative_field_values_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._creative_field_values_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._creative_field_values_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._creative_field_values_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._creative_field_values_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_creative_fields {
            if self.opt.cmd_delete {
                call_result = self._creative_fields_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._creative_fields_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._creative_fields_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._creative_fields_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._creative_fields_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._creative_fields_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_creative_groups {
            if self.opt.cmd_get {
                call_result = self._creative_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._creative_groups_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._creative_groups_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._creative_groups_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._creative_groups_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_creatives {
            if self.opt.cmd_get {
                call_result = self._creatives_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._creatives_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._creatives_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._creatives_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._creatives_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_dimension_values {
            if self.opt.cmd_query {
                call_result = self._dimension_values_query(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_directory_site_contacts {
            if self.opt.cmd_get {
                call_result = self._directory_site_contacts_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._directory_site_contacts_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_directory_sites {
            if self.opt.cmd_get {
                call_result = self._directory_sites_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._directory_sites_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._directory_sites_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_event_tags {
            if self.opt.cmd_delete {
                call_result = self._event_tags_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._event_tags_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._event_tags_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._event_tags_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._event_tags_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._event_tags_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_files {
            if self.opt.cmd_get {
                call_result = self._files_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._files_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_floodlight_activities {
            if self.opt.cmd_delete {
                call_result = self._floodlight_activities_delete(dry_run, &mut err);
            } else if self.opt.cmd_generatetag {
                call_result = self._floodlight_activities_generatetag(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._floodlight_activities_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._floodlight_activities_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._floodlight_activities_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._floodlight_activities_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._floodlight_activities_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_floodlight_activity_groups {
            if self.opt.cmd_delete {
                call_result = self._floodlight_activity_groups_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._floodlight_activity_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._floodlight_activity_groups_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._floodlight_activity_groups_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._floodlight_activity_groups_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._floodlight_activity_groups_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_floodlight_configurations {
            if self.opt.cmd_get {
                call_result = self._floodlight_configurations_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._floodlight_configurations_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._floodlight_configurations_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._floodlight_configurations_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_inventory_items {
            if self.opt.cmd_get {
                call_result = self._inventory_items_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._inventory_items_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_landing_pages {
            if self.opt.cmd_delete {
                call_result = self._landing_pages_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._landing_pages_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._landing_pages_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._landing_pages_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._landing_pages_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._landing_pages_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_metros {
            if self.opt.cmd_list {
                call_result = self._metros_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_mobile_carriers {
            if self.opt.cmd_get {
                call_result = self._mobile_carriers_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._mobile_carriers_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_operating_system_versions {
            if self.opt.cmd_get {
                call_result = self._operating_system_versions_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._operating_system_versions_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_operating_systems {
            if self.opt.cmd_get {
                call_result = self._operating_systems_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._operating_systems_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_order_documents {
            if self.opt.cmd_get {
                call_result = self._order_documents_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._order_documents_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_orders {
            if self.opt.cmd_get {
                call_result = self._orders_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._orders_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_placement_groups {
            if self.opt.cmd_get {
                call_result = self._placement_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._placement_groups_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._placement_groups_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._placement_groups_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._placement_groups_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_placement_strategies {
            if self.opt.cmd_delete {
                call_result = self._placement_strategies_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._placement_strategies_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._placement_strategies_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._placement_strategies_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._placement_strategies_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._placement_strategies_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_placements {
            if self.opt.cmd_generatetags {
                call_result = self._placements_generatetags(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._placements_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._placements_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._placements_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._placements_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._placements_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_platform_types {
            if self.opt.cmd_get {
                call_result = self._platform_types_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._platform_types_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_postal_codes {
            if self.opt.cmd_get {
                call_result = self._postal_codes_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._postal_codes_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_projects {
            if self.opt.cmd_get {
                call_result = self._projects_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._projects_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_regions {
            if self.opt.cmd_list {
                call_result = self._regions_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_remarketing_list_shares {
            if self.opt.cmd_get {
                call_result = self._remarketing_list_shares_get(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._remarketing_list_shares_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._remarketing_list_shares_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_remarketing_lists {
            if self.opt.cmd_get {
                call_result = self._remarketing_lists_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._remarketing_lists_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._remarketing_lists_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._remarketing_lists_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._remarketing_lists_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_reports {
            if self.opt.cmd_compatible_fields_query {
                call_result = self._reports_compatible_fields_query(dry_run, &mut err);
            } else if self.opt.cmd_delete {
                call_result = self._reports_delete(dry_run, &mut err);
            } else if self.opt.cmd_files_get {
                call_result = self._reports_files_get(dry_run, &mut err);
            } else if self.opt.cmd_files_list {
                call_result = self._reports_files_list(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._reports_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._reports_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._reports_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._reports_patch(dry_run, &mut err);
            } else if self.opt.cmd_run {
                call_result = self._reports_run(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._reports_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_sites {
            if self.opt.cmd_get {
                call_result = self._sites_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._sites_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._sites_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._sites_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._sites_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_sizes {
            if self.opt.cmd_get {
                call_result = self._sizes_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._sizes_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._sizes_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_subaccounts {
            if self.opt.cmd_get {
                call_result = self._subaccounts_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._subaccounts_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._subaccounts_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._subaccounts_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._subaccounts_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_targetable_remarketing_lists {
            if self.opt.cmd_get {
                call_result = self._targetable_remarketing_lists_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._targetable_remarketing_lists_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_user_profiles {
            if self.opt.cmd_get {
                call_result = self._user_profiles_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._user_profiles_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_user_role_permission_groups {
            if self.opt.cmd_get {
                call_result = self._user_role_permission_groups_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._user_role_permission_groups_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_user_role_permissions {
            if self.opt.cmd_get {
                call_result = self._user_role_permissions_get(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._user_role_permissions_list(dry_run, &mut err);
            } else {
                unreachable!();
            }
        }
 else if self.opt.cmd_user_roles {
            if self.opt.cmd_delete {
                call_result = self._user_roles_delete(dry_run, &mut err);
            } else if self.opt.cmd_get {
                call_result = self._user_roles_get(dry_run, &mut err);
            } else if self.opt.cmd_insert {
                call_result = self._user_roles_insert(dry_run, &mut err);
            } else if self.opt.cmd_list {
                call_result = self._user_roles_list(dry_run, &mut err);
            } else if self.opt.cmd_patch {
                call_result = self._user_roles_patch(dry_run, &mut err);
            } else if self.opt.cmd_update {
                call_result = self._user_roles_update(dry_run, &mut err);
            } else {
                unreachable!();
            }
        } else {
            unreachable!();
        }

        if dry_run {
            if err.issues.len() > 0 {
                err_opt = Some(err);
            }
        }
        (call_result, err_opt)
    }

    // Please note that this call will fail if any part of the opt can't be handled
    fn new(opt: Options) -> Result<Engine, InvalidOptionsError> {
        let (config_dir, secret) = {
            let config_dir = match cmn::assure_config_dir_exists(&opt.flag_config_dir) {
                Err(e) => return Err(InvalidOptionsError::single(e, 3)),
                Ok(p) => p,
            };

            match cmn::application_secret_from_directory(&config_dir, "dfareporting2d1-secret.json", 
                                                         "{\"installed\":{\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"client_secret\":\"hCsslbCUyfehWMmbkG8vTYxG\",\"token_uri\":\"https://accounts.google.com/o/oauth2/token\",\"client_email\":\"\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"oob\"],\"client_x509_cert_url\":\"\",\"client_id\":\"620010449518-9ngf7o4dhs0dka470npqvor6dc5lqb9b.apps.googleusercontent.com\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\"}}") {
                Ok(secret) => (config_dir, secret),
                Err(e) => return Err(InvalidOptionsError::single(e, 4))
            }
        };

        let auth = Authenticator::new(  &secret, DefaultAuthenticatorDelegate,
                                        if opt.flag_debug_auth {
                                            hyper::Client::with_connector(mock::TeeConnector {
                                                    connector: hyper::net::HttpConnector(None) 
                                                })
                                        } else {
                                            hyper::Client::new()
                                        },
                                        JsonTokenStorage {
                                          program_name: "dfareporting2d1",
                                          db_dir: config_dir.clone(),
                                        }, None);

        let client = 
            if opt.flag_debug {
                hyper::Client::with_connector(mock::TeeConnector {
                        connector: hyper::net::HttpConnector(None) 
                    })
            } else {
                hyper::Client::new()
            };
        let engine = Engine {
            opt: opt,
            hub: api::Dfareporting::new(client, auth),
        };

        match engine._doit(true) {
            (_, Some(err)) => Err(err),
            _ => Ok(engine),
        }
    }

    // Execute the call with all the bells and whistles, informing the caller only if there was an error.
    // The absense of one indicates success.
    fn doit(&self) -> Option<api::Error> {
        self._doit(false).0
    }
}

fn main() {
    let opts: Options = Options::docopt().decode().unwrap_or_else(|e| e.exit());
    let debug = opts.flag_debug;
    match Engine::new(opts) {
        Err(err) => {
            writeln!(io::stderr(), "{}", err).ok();
            env::set_exit_status(err.exit_code);
        },
        Ok(engine) => {
            if let Some(err) = engine.doit() {
                if debug {
                    writeln!(io::stderr(), "{:?}", err).ok();
                } else {
                    writeln!(io::stderr(), "{}", err).ok();
                }
                env::set_exit_status(1);
            }
        }
    }
}