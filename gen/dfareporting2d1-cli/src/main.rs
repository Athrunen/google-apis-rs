// DO NOT EDIT !
// This file was generated automatically from 'src/mako/cli/main.rs.mako'
// DO NOT EDIT !
#![feature(plugin, exit_status)]
#![allow(unused_variables, unused_imports, dead_code, unused_mut)]

#[macro_use]
extern crate clap;
extern crate yup_oauth2 as oauth2;
extern crate yup_hyper_mock as mock;
extern crate serde;
extern crate hyper;
extern crate mime;
extern crate strsim;
extern crate google_dfareporting2d1 as api;

use std::env;
use std::io::{self, Write};
use clap::{App, SubCommand, Arg};

mod cmn;

use cmn::{InvalidOptionsError, CLIError, JsonTokenStorage, arg_from_str, writer_from_opts, parse_kv_arg, 
          input_file_from_opts, input_mime_from_opts, FieldCursor, FieldError, CallType, UploadProtocol,
          calltype_from_str, remove_json_null_values};

use std::default::Default;
use std::str::FromStr;

use oauth2::{Authenticator, DefaultAuthenticatorDelegate};
use serde::json;
use clap::ArgMatches;

enum DoitError {
    IoError(String, io::Error),
    ApiError(api::Error),
}

struct Engine<'n, 'a> {
    opt: ArgMatches<'n, 'a>,
    hub: api::Dfareporting<hyper::Client, Authenticator<DefaultAuthenticatorDelegate, JsonTokenStorage, hyper::Client>>,
    gp: Vec<&'static str>,
    gpm: Vec<(&'static str, &'static str)>,
}


impl<'n, 'a> Engine<'n, 'a> {
    fn _account_active_ad_summaries_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_active_ad_summaries().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("summary-account-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_permission_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_permission_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_permission_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_permission_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_permissions_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_permissions().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_permissions_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_permissions().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_user_profiles_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_user_profiles().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_user_profiles_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-filter", "campaign-filter", "comments", "email", "id", "kind", "locale", "name", "object-ids", "site-filter", "status", "subaccount-id", "trafficker-type", "user-access-type", "user-role-filter", "user-role-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_user_profiles_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.account_user_profiles().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "user-role-id" => {
                    call = call.user_role_id(value.unwrap_or(""));
                },
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "subaccount-id", "sort-field", "ids", "max-results", "page-token", "user-role-id", "sort-order", "active"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_user_profiles_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-filter", "campaign-filter", "comments", "email", "id", "kind", "locale", "name", "object-ids", "site-filter", "status", "subaccount-id", "trafficker-type", "user-access-type", "user-role-filter", "user-role-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _account_user_profiles_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AccountUserProfile::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_filter_init(request: &mut api::AccountUserProfile) {
                if request.advertiser_filter.is_none() {
                    request.advertiser_filter = Some(Default::default());
                }
            }
            
            fn request_campaign_filter_init(request: &mut api::AccountUserProfile) {
                if request.campaign_filter.is_none() {
                    request.campaign_filter = Some(Default::default());
                }
            }
            
            fn request_site_filter_init(request: &mut api::AccountUserProfile) {
                if request.site_filter.is_none() {
                    request.site_filter = Some(Default::default());
                }
            }
            
            fn request_user_role_filter_init(request: &mut api::AccountUserProfile) {
                if request.user_role_filter.is_none() {
                    request.user_role_filter = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.object-ids" => {
                        request_user_role_filter_init(&mut request);
                        if request.user_role_filter.as_mut().unwrap().object_ids.is_none() {
                           request.user_role_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.user_role_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "user-role-filter.status" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "user-role-filter.kind" => {
                        request_user_role_filter_init(&mut request);
                        request.user_role_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_user_role_filter_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request_user_role_filter_init(&mut request);
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.object-ids" => {
                        request_site_filter_init(&mut request);
                        if request.site_filter.as_mut().unwrap().object_ids.is_none() {
                           request.site_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.site_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "site-filter.status" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "site-filter.kind" => {
                        request_site_filter_init(&mut request);
                        request.site_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "comments" => {
                        request_site_filter_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-type" => {
                        request_site_filter_init(&mut request);
                        request.trafficker_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.object-ids" => {
                        request_advertiser_filter_init(&mut request);
                        if request.advertiser_filter.as_mut().unwrap().object_ids.is_none() {
                           request.advertiser_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.advertiser_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.status" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-filter.kind" => {
                        request_advertiser_filter_init(&mut request);
                        request.advertiser_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.object-ids" => {
                        request_campaign_filter_init(&mut request);
                        if request.campaign_filter.as_mut().unwrap().object_ids.is_none() {
                           request.campaign_filter.as_mut().unwrap().object_ids = Some(Default::default());
                        }
                                        request.campaign_filter.as_mut().unwrap().object_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "campaign-filter.status" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-filter.kind" => {
                        request_campaign_filter_init(&mut request);
                        request.campaign_filter.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "email" => {
                        request_campaign_filter_init(&mut request);
                        request.email = Some(value.unwrap_or("").to_string());
                    },
                "user-role-id" => {
                        request_campaign_filter_init(&mut request);
                        request.user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "user-access-type" => {
                        request_campaign_filter_init(&mut request);
                        request.user_access_type = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_campaign_filter_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_campaign_filter_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_campaign_filter_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-filter", "campaign-filter", "comments", "email", "id", "kind", "locale", "name", "object-ids", "site-filter", "status", "subaccount-id", "trafficker-type", "user-access-type", "user-role-filter", "user-role-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.account_user_profiles().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _accounts_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.accounts().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _accounts_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.accounts().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order", "active"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _accounts_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Account::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_reports_configuration_init(request: &mut api::Account) {
                if request.reports_configuration.is_none() {
                    request.reports_configuration = Some(Default::default());
                }
            }
            
            fn request_reports_configuration_lookback_configuration_init(request: &mut api::Account) {
                request_reports_configuration_init(request);
                if request.reports_configuration.as_mut().unwrap().lookback_configuration.is_none() {
                    request.reports_configuration.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "teaser-size-limit" => {
                        request.teaser_size_limit = Some(value.unwrap_or("").to_string());
                    },
                "active-view-opt-out" => {
                        request.active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "active-view-opt-out", "boolean"));
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "maximum-image-size" => {
                        request.maximum_image_size = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "default-creative-size-id" => {
                        request.default_creative_size_id = Some(value.unwrap_or("").to_string());
                    },
                "account-permission-ids" => {
                        if request.account_permission_ids.is_none() {
                           request.account_permission_ids = Some(Default::default());
                        }
                                        request.account_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "account-profile" => {
                        request.account_profile = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "nielsen-ocr-enabled" => {
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "reports-configuration.report-generation-time-zone-id" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().report_generation_time_zone_id = Some(value.unwrap_or("").to_string());
                    },
                "reports-configuration.exposure-to-conversion-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "reports-configuration.exposure-to-conversion-enabled", "boolean"));
                    },
                "reports-configuration.lookback-configuration.click-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.click-duration", "integer"));
                    },
                "reports-configuration.lookback-configuration.post-impression-activities-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "currency-id" => {
                        request_reports_configuration_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_reports_configuration_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "comscore-vce-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "active-ads-limit-tier" => {
                        request_reports_configuration_init(&mut request);
                        request.active_ads_limit_tier = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_reports_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request_reports_configuration_init(&mut request);
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        request_reports_configuration_init(&mut request);
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-permission-ids", "account-profile", "active", "active-ads-limit-tier", "active-view-opt-out", "available-permission-ids", "click-duration", "comscore-vce-enabled", "country-id", "currency-id", "default-creative-size-id", "description", "exposure-to-conversion-enabled", "id", "kind", "locale", "lookback-configuration", "maximum-image-size", "name", "nielsen-ocr-enabled", "post-impression-activities-duration", "report-generation-time-zone-id", "reports-configuration", "teaser-size-limit"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.accounts().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _accounts_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Account::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_reports_configuration_init(request: &mut api::Account) {
                if request.reports_configuration.is_none() {
                    request.reports_configuration = Some(Default::default());
                }
            }
            
            fn request_reports_configuration_lookback_configuration_init(request: &mut api::Account) {
                request_reports_configuration_init(request);
                if request.reports_configuration.as_mut().unwrap().lookback_configuration.is_none() {
                    request.reports_configuration.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "teaser-size-limit" => {
                        request.teaser_size_limit = Some(value.unwrap_or("").to_string());
                    },
                "active-view-opt-out" => {
                        request.active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "active-view-opt-out", "boolean"));
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "maximum-image-size" => {
                        request.maximum_image_size = Some(value.unwrap_or("").to_string());
                    },
                "locale" => {
                        request.locale = Some(value.unwrap_or("").to_string());
                    },
                "default-creative-size-id" => {
                        request.default_creative_size_id = Some(value.unwrap_or("").to_string());
                    },
                "account-permission-ids" => {
                        if request.account_permission_ids.is_none() {
                           request.account_permission_ids = Some(Default::default());
                        }
                                        request.account_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "account-profile" => {
                        request.account_profile = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "nielsen-ocr-enabled" => {
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "reports-configuration.report-generation-time-zone-id" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().report_generation_time_zone_id = Some(value.unwrap_or("").to_string());
                    },
                "reports-configuration.exposure-to-conversion-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "reports-configuration.exposure-to-conversion-enabled", "boolean"));
                    },
                "reports-configuration.lookback-configuration.click-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.click-duration", "integer"));
                    },
                "reports-configuration.lookback-configuration.post-impression-activities-duration" => {
                        request_reports_configuration_lookback_configuration_init(&mut request);
                        request.reports_configuration.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "reports-configuration.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "currency-id" => {
                        request_reports_configuration_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_reports_configuration_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "comscore-vce-enabled" => {
                        request_reports_configuration_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "active-ads-limit-tier" => {
                        request_reports_configuration_init(&mut request);
                        request.active_ads_limit_tier = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_reports_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request_reports_configuration_init(&mut request);
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        request_reports_configuration_init(&mut request);
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-permission-ids", "account-profile", "active", "active-ads-limit-tier", "active-view-opt-out", "available-permission-ids", "click-duration", "comscore-vce-enabled", "country-id", "currency-id", "default-creative-size-id", "description", "exposure-to-conversion-enabled", "id", "kind", "locale", "lookback-configuration", "maximum-image-size", "name", "nielsen-ocr-enabled", "post-impression-activities-duration", "report-generation-time-zone-id", "reports-configuration", "teaser-size-limit"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.accounts().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _ads_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.ads().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _ads_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "archived", "audience-segment-id", "campaign-id", "campaign-id-dimension-value", "click-through-url", "click-through-url-suffix", "click-through-url-suffix-properties", "comments", "compatibility", "create-info", "creative-optimization-configuration-id", "creative-rotation", "custom-click-through-url", "day-part-targeting", "days-of-week", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "default-landing-page", "delivery-schedule", "dimension-name", "duration", "dynamic-click-tracker", "end-time", "etag", "exclude-countries", "expression", "frequency-cap", "geo-targeting", "hard-cutoff", "height", "hours-of-day", "iab", "id", "id-dimension-value", "impression-ratio", "impressions", "key-value-targeting-expression", "kind", "landing-page-id", "last-modified-info", "match-type", "name", "override-inherited-event-tag", "override-inherited-suffix", "priority", "remarketing-list-expression", "size", "ssl-compliant", "ssl-required", "start-time", "subaccount-id", "time", "type", "user-local-time", "value", "weight-calculation-strategy", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.ads().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _ads_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.ads().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "type" => {
                    call = call.add_type(value.unwrap_or(""));
                },
                "ssl-required" => {
                    call = call.ssl_required(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                },
                "ssl-compliant" => {
                    call = call.ssl_compliant(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "remarketing-list-ids" => {
                    call = call.add_remarketing_list_ids(value.unwrap_or(""));
                },
                "placement-ids" => {
                    call = call.add_placement_ids(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "overridden-event-tag-id" => {
                    call = call.overridden_event_tag_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "landing-page-ids" => {
                    call = call.add_landing_page_ids(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "dynamic-click-tracker" => {
                    call = call.dynamic_click_tracker(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                },
                "creative-type" => {
                    call = call.creative_type(value.unwrap_or(""));
                },
                "creative-optimization-configuration-ids" => {
                    call = call.add_creative_optimization_configuration_ids(value.unwrap_or(""));
                },
                "creative-ids" => {
                    call = call.add_creative_ids(value.unwrap_or(""));
                },
                "compatibility" => {
                    call = call.compatibility(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "audience-segment-ids" => {
                    call = call.add_audience_segment_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["landing-page-ids", "overridden-event-tag-id", "campaign-ids", "archived", "creative-optimization-configuration-ids", "ssl-compliant", "size-ids", "page-token", "sort-order", "type", "ssl-required", "creative-ids", "max-results", "creative-type", "placement-ids", "active", "compatibility", "advertiser-id", "search-string", "sort-field", "audience-segment-ids", "ids", "remarketing-list-ids", "dynamic-click-tracker"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _ads_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "archived", "audience-segment-id", "campaign-id", "campaign-id-dimension-value", "click-through-url", "click-through-url-suffix", "click-through-url-suffix-properties", "comments", "compatibility", "create-info", "creative-optimization-configuration-id", "creative-rotation", "custom-click-through-url", "day-part-targeting", "days-of-week", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "default-landing-page", "delivery-schedule", "dimension-name", "duration", "dynamic-click-tracker", "end-time", "etag", "exclude-countries", "expression", "frequency-cap", "geo-targeting", "hard-cutoff", "height", "hours-of-day", "iab", "id", "id-dimension-value", "impression-ratio", "impressions", "key-value-targeting-expression", "kind", "landing-page-id", "last-modified-info", "match-type", "name", "override-inherited-event-tag", "override-inherited-suffix", "priority", "remarketing-list-expression", "size", "ssl-compliant", "ssl-required", "start-time", "subaccount-id", "time", "type", "user-local-time", "value", "weight-calculation-strategy", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.ads().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _ads_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Ad::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Ad) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Ad) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_init(request: &mut api::Ad) {
                if request.click_through_url.is_none() {
                    request.click_through_url = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Ad) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Ad) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_rotation_init(request: &mut api::Ad) {
                if request.creative_rotation.is_none() {
                    request.creative_rotation = Some(Default::default());
                }
            }
            
            fn request_day_part_targeting_init(request: &mut api::Ad) {
                if request.day_part_targeting.is_none() {
                    request.day_part_targeting = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Ad) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_frequency_cap_init(request: &mut api::Ad) {
                request_delivery_schedule_init(request);
                if request.delivery_schedule.as_mut().unwrap().frequency_cap.is_none() {
                    request.delivery_schedule.as_mut().unwrap().frequency_cap = Some(Default::default());
                }
            }
            
            fn request_delivery_schedule_init(request: &mut api::Ad) {
                if request.delivery_schedule.is_none() {
                    request.delivery_schedule = Some(Default::default());
                }
            }
            
            fn request_geo_targeting_init(request: &mut api::Ad) {
                if request.geo_targeting.is_none() {
                    request.geo_targeting = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Ad) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_key_value_targeting_expression_init(request: &mut api::Ad) {
                if request.key_value_targeting_expression.is_none() {
                    request.key_value_targeting_expression = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Ad) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_remarketing_list_expression_init(request: &mut api::Ad) {
                if request.remarketing_list_expression.is_none() {
                    request.remarketing_list_expression = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Ad) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "campaign-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "geo-targeting.exclude-countries" => {
                        request_geo_targeting_init(&mut request);
                        request.geo_targeting.as_mut().unwrap().exclude_countries = Some(arg_from_str(value.unwrap_or("false"), err, "geo-targeting.exclude-countries", "boolean"));
                    },
                "delivery-schedule.priority" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().priority = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.hard-cutoff" => {
                        request_delivery_schedule_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().hard_cutoff = Some(arg_from_str(value.unwrap_or("false"), err, "delivery-schedule.hard-cutoff", "boolean"));
                    },
                "delivery-schedule.frequency-cap.duration" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().duration = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.frequency-cap.impressions" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().frequency_cap.as_mut().unwrap().impressions = Some(value.unwrap_or("").to_string());
                    },
                "delivery-schedule.impression-ratio" => {
                        request_delivery_schedule_frequency_cap_init(&mut request);
                        request.delivery_schedule.as_mut().unwrap().impression_ratio = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-expression.expression" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.remarketing_list_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_remarketing_list_expression_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "creative-rotation.weight-calculation-strategy" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().weight_calculation_strategy = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.creative-optimization-configuration-id" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().creative_optimization_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "creative-rotation.type" => {
                        request_creative_rotation_init(&mut request);
                        request.creative_rotation.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.landing-page-id" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().landing_page_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.custom-click-through-url" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().custom_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url.default-landing-page" => {
                        request_click_through_url_init(&mut request);
                        request.click_through_url.as_mut().unwrap().default_landing_page = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url.default-landing-page", "boolean"));
                    },
                "comments" => {
                        request_click_through_url_init(&mut request);
                        request.comments = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "type" => {
                        request_size_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "audience-segment-id" => {
                        request_size_init(&mut request);
                        request.audience_segment_id = Some(value.unwrap_or("").to_string());
                    },
                "key-value-targeting-expression.expression" => {
                        request_key_value_targeting_expression_init(&mut request);
                        request.key_value_targeting_expression.as_mut().unwrap().expression = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "start-time" => {
                        request_create_info_init(&mut request);
                        request.start_time = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_create_info_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "compatibility" => {
                        request_create_info_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "day-part-targeting.user-local-time" => {
                        request_day_part_targeting_init(&mut request);
                        request.day_part_targeting.as_mut().unwrap().user_local_time = Some(arg_from_str(value.unwrap_or("false"), err, "day-part-targeting.user-local-time", "boolean"));
                    },
                "day-part-targeting.hours-of-day" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().hours_of_day.is_none() {
                           request.day_part_targeting.as_mut().unwrap().hours_of_day = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().hours_of_day.as_mut().unwrap().push(arg_from_str(value.unwrap_or("-0"), err, "day-part-targeting.hours-of-day", "integer"));
                    },
                "day-part-targeting.days-of-week" => {
                        request_day_part_targeting_init(&mut request);
                        if request.day_part_targeting.as_mut().unwrap().days_of_week.is_none() {
                           request.day_part_targeting.as_mut().unwrap().days_of_week = Some(Default::default());
                        }
                                        request.day_part_targeting.as_mut().unwrap().days_of_week.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "end-time" => {
                        request_last_modified_info_init(&mut request);
                        request.end_time = Some(value.unwrap_or("").to_string());
                    },
                "dynamic-click-tracker" => {
                        request_last_modified_info_init(&mut request);
                        request.dynamic_click_tracker = Some(arg_from_str(value.unwrap_or("false"), err, "dynamic-click-tracker", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "archived", "audience-segment-id", "campaign-id", "campaign-id-dimension-value", "click-through-url", "click-through-url-suffix", "click-through-url-suffix-properties", "comments", "compatibility", "create-info", "creative-optimization-configuration-id", "creative-rotation", "custom-click-through-url", "day-part-targeting", "days-of-week", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "default-landing-page", "delivery-schedule", "dimension-name", "duration", "dynamic-click-tracker", "end-time", "etag", "exclude-countries", "expression", "frequency-cap", "geo-targeting", "hard-cutoff", "height", "hours-of-day", "iab", "id", "id-dimension-value", "impression-ratio", "impressions", "key-value-targeting-expression", "kind", "landing-page-id", "last-modified-info", "match-type", "name", "override-inherited-event-tag", "override-inherited-suffix", "priority", "remarketing-list-expression", "size", "ssl-compliant", "ssl-required", "start-time", "subaccount-id", "time", "type", "user-local-time", "value", "weight-calculation-strategy", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.ads().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.advertiser_groups().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.advertiser_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.advertiser_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertiser_groups_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::AdvertiserGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertiser_groups().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertisers_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.advertisers().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertisers_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "click-through-url-suffix", "default-click-through-event-tag-id", "default-email", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "original-floodlight-configuration-id", "status", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertisers().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertisers_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.advertisers().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "status" => {
                    call = call.status(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "only-parent" => {
                    call = call.only_parent(arg_from_str(value.unwrap_or("false"), err, "only-parent", "boolean"));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "include-advertisers-without-groups-only" => {
                    call = call.include_advertisers_without_groups_only(arg_from_str(value.unwrap_or("false"), err, "include-advertisers-without-groups-only", "boolean"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-ids" => {
                    call = call.add_floodlight_configuration_ids(value.unwrap_or(""));
                },
                "advertiser-group-ids" => {
                    call = call.add_advertiser_group_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["status", "search-string", "subaccount-id", "include-advertisers-without-groups-only", "sort-field", "ids", "max-results", "page-token", "only-parent", "sort-order", "floodlight-configuration-ids", "advertiser-group-ids"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertisers_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "click-through-url-suffix", "default-click-through-event-tag-id", "default-email", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "original-floodlight-configuration-id", "status", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertisers().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _advertisers_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Advertiser::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Advertiser) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-id" => {
                        request.default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "original-floodlight-configuration-id" => {
                        request.original_floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix" => {
                        request.click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "default-email" => {
                        request_id_dimension_value_init(&mut request);
                        request.default_email = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "click-through-url-suffix", "default-click-through-event-tag-id", "default-email", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "original-floodlight-configuration-id", "status", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.advertisers().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _browsers_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.browsers().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaign_creative_associations_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CampaignCreativeAssociation::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "creative-id" => {
                        request.creative_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["creative-id", "kind"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.campaign_creative_associations().insert(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaign_creative_associations_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.campaign_creative_associations().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["page-token", "sort-order", "max-results"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaigns_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.campaigns().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaigns_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "advertiser-id", "advertiser-id-dimension-value", "archived", "billing-invoice-code", "click-duration", "click-through-url-suffix", "click-through-url-suffix-properties", "comment", "comscore-vce-enabled", "create-info", "creative-group-ids", "creative-optimization-configuration", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "dimension-name", "end-date", "etag", "external-id", "id", "id-dimension-value", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "nielsen-ocr-enabled", "optimization-model", "override-inherited-event-tag", "override-inherited-suffix", "post-impression-activities-duration", "start-date", "subaccount-id", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.campaigns().insert(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("default-landing-page-name").unwrap_or(""), opt.value_of("default-landing-page-url").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaigns_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.campaigns().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "overridden-event-tag-id" => {
                    call = call.overridden_event_tag_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "excluded-ids" => {
                    call = call.add_excluded_ids(value.unwrap_or(""));
                },
                "at-least-one-optimization-activity" => {
                    call = call.at_least_one_optimization_activity(arg_from_str(value.unwrap_or("false"), err, "at-least-one-optimization-activity", "boolean"));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                "advertiser-group-ids" => {
                    call = call.add_advertiser_group_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["archived", "search-string", "subaccount-id", "sort-field", "advertiser-ids", "ids", "max-results", "excluded-ids", "page-token", "advertiser-group-ids", "sort-order", "overridden-event-tag-id", "at-least-one-optimization-activity"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaigns_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "advertiser-id", "advertiser-id-dimension-value", "archived", "billing-invoice-code", "click-duration", "click-through-url-suffix", "click-through-url-suffix-properties", "comment", "comscore-vce-enabled", "create-info", "creative-group-ids", "creative-optimization-configuration", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "dimension-name", "end-date", "etag", "external-id", "id", "id-dimension-value", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "nielsen-ocr-enabled", "optimization-model", "override-inherited-event-tag", "override-inherited-suffix", "post-impression-activities-duration", "start-date", "subaccount-id", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.campaigns().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _campaigns_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Campaign::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Campaign) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_click_through_url_suffix_properties_init(request: &mut api::Campaign) {
                if request.click_through_url_suffix_properties.is_none() {
                    request.click_through_url_suffix_properties = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Campaign) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_creative_optimization_configuration_init(request: &mut api::Campaign) {
                if request.creative_optimization_configuration.is_none() {
                    request.creative_optimization_configuration = Some(Default::default());
                }
            }
            
            fn request_default_click_through_event_tag_properties_init(request: &mut api::Campaign) {
                if request.default_click_through_event_tag_properties.is_none() {
                    request.default_click_through_event_tag_properties = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Campaign) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Campaign) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Campaign) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.click-through-url-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().click_through_url_suffix = Some(value.unwrap_or("").to_string());
                    },
                "click-through-url-suffix-properties.override-inherited-suffix" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.click_through_url_suffix_properties.as_mut().unwrap().override_inherited_suffix = Some(arg_from_str(value.unwrap_or("false"), err, "click-through-url-suffix-properties.override-inherited-suffix", "boolean"));
                    },
                "advertiser-id" => {
                        request_click_through_url_suffix_properties_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.optimization-model" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().optimization_model = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "creative-optimization-configuration.name" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.creative_optimization_configuration.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "trafficker-emails" => {
                        request_creative_optimization_configuration_init(&mut request);
                        if request.trafficker_emails.is_none() {
                           request.trafficker_emails = Some(Default::default());
                        }
                                        request.trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "external-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-group-id" => {
                        request_creative_optimization_configuration_init(&mut request);
                        request.advertiser_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "billing-invoice-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.billing_invoice_code = Some(value.unwrap_or("").to_string());
                    },
                "comscore-vce-enabled" => {
                        request_id_dimension_value_init(&mut request);
                        request.comscore_vce_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "comscore-vce-enabled", "boolean"));
                    },
                "creative-group-ids" => {
                        request_id_dimension_value_init(&mut request);
                        if request.creative_group_ids.is_none() {
                           request.creative_group_ids = Some(Default::default());
                        }
                                        request.creative_group_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "default-click-through-event-tag-properties.override-inherited-event-tag" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().override_inherited_event_tag = Some(arg_from_str(value.unwrap_or("false"), err, "default-click-through-event-tag-properties.override-inherited-event-tag", "boolean"));
                    },
                "default-click-through-event-tag-properties.default-click-through-event-tag-id" => {
                        request_default_click_through_event_tag_properties_init(&mut request);
                        request.default_click_through_event_tag_properties.as_mut().unwrap().default_click_through_event_tag_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_create_info_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_create_info_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_create_info_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "nielsen-ocr-enabled" => {
                        request_lookback_configuration_init(&mut request);
                        request.nielsen_ocr_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "nielsen-ocr-enabled", "boolean"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-group-id", "advertiser-id", "advertiser-id-dimension-value", "archived", "billing-invoice-code", "click-duration", "click-through-url-suffix", "click-through-url-suffix-properties", "comment", "comscore-vce-enabled", "create-info", "creative-group-ids", "creative-optimization-configuration", "default-click-through-event-tag-id", "default-click-through-event-tag-properties", "dimension-name", "end-date", "etag", "external-id", "id", "id-dimension-value", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "nielsen-ocr-enabled", "optimization-model", "override-inherited-event-tag", "override-inherited-suffix", "post-impression-activities-duration", "start-date", "subaccount-id", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.campaigns().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _change_logs_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.change_logs().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _change_logs_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.change_logs().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "user-profile-ids" => {
                    call = call.add_user_profile_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "object-type" => {
                    call = call.object_type(value.unwrap_or(""));
                },
                "object-ids" => {
                    call = call.add_object_ids(value.unwrap_or(""));
                },
                "min-change-time" => {
                    call = call.min_change_time(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "max-change-time" => {
                    call = call.max_change_time(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "action" => {
                    call = call.action(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["min-change-time", "search-string", "max-change-time", "user-profile-ids", "ids", "max-results", "object-ids", "page-token", "action", "object-type"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _cities_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.cities().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "region-dart-ids" => {
                    call = call.add_region_dart_ids(value.unwrap_or(""));
                },
                "name-prefix" => {
                    call = call.name_prefix(value.unwrap_or(""));
                },
                "dart-ids" => {
                    call = call.add_dart_ids(value.unwrap_or(""));
                },
                "country-dart-ids" => {
                    call = call.add_country_dart_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["dart-ids", "country-dart-ids", "region-dart-ids", "name-prefix"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _connection_types_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.connection_types().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _connection_types_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.connection_types().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.content_categories().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.content_categories().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.content_categories().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.content_categories().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.content_categories().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _content_categories_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::ContentCategory::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.content_categories().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _countries_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.countries().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("dart-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _countries_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.countries().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_assets_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeAssetMetadata::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_asset_identifier_init(request: &mut api::CreativeAssetMetadata) {
                if request.asset_identifier.is_none() {
                    request.asset_identifier = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "warned-validation-rules" => {
                        if request.warned_validation_rules.is_none() {
                           request.warned_validation_rules = Some(Default::default());
                        }
                                        request.warned_validation_rules.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "detected-features" => {
                        if request.detected_features.is_none() {
                           request.detected_features = Some(Default::default());
                        }
                                        request.detected_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "asset-identifier.type" => {
                        request_asset_identifier_init(&mut request);
                        request.asset_identifier.as_mut().unwrap().type_ = Some(value.unwrap_or("").to_string());
                    },
                "asset-identifier.name" => {
                        request_asset_identifier_init(&mut request);
                        request.asset_identifier.as_mut().unwrap().name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["asset-identifier", "detected-features", "kind", "name", "type", "warned-validation-rules"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_assets().insert(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("advertiser-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let vals = opt.values_of("mode").unwrap();
        let protocol = calltype_from_str(vals[0], ["simple", "resumable"].iter().map(|&v| v.to_string()).collect(), err);
        let mut input_file = input_file_from_opts(vals[1], err);
        let mime_type = input_mime_from_opts(opt.value_of("mime").unwrap_or("application/octet-stream"), err);
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Upload(UploadProtocol::Simple) => call.upload(input_file.unwrap(), mime_type.unwrap()),
                CallType::Upload(UploadProtocol::Resumable) => call.upload_resumable(input_file.unwrap(), mime_type.unwrap()),
                CallType::Standard => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_field_values().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_field_values().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["id", "kind", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_field_values().insert(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_field_values().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["id", "kind", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_field_values().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_field_values_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeFieldValue::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "value" => {
                        request.value = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["id", "kind", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_field_values().update(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("creative-field-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_fields().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_fields().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_fields().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_fields().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "advertiser-ids", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_fields().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_fields_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeField::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeField) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_fields().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_groups_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "group-number", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_groups().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creative_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "group-number" => {
                    call = call.group_number(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "advertiser-ids", "ids", "max-results", "group-number", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_groups_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "group-number", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_groups().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creative_groups_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::CreativeGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::CreativeGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "group-number" => {
                        request.group_number = Some(arg_from_str(value.unwrap_or("-0"), err, "group-number", "integer"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "group-number", "id", "kind", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creative_groups().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creatives_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creatives().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creatives_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "ad-parameters", "ad-tag-keys", "advertiser-id", "allow-script-access", "archived", "artwork-type", "authoring-tool", "auto-advance-images", "background-color", "backup-image-click-through-url", "backup-image-features", "backup-image-reporting-label", "backup-image-target-window", "commercial-id", "companion-creatives", "compatibility", "convert-flash-to-html5", "custom-html", "custom-key-values", "dimension-name", "etag", "fs-command", "height", "html-code", "html-code-locked", "iab", "id", "id-dimension-value", "kind", "last-modified-info", "latest-trafficked-creative-id", "left", "match-type", "name", "override-css", "position-option", "redirect-url", "rendering-id", "rendering-id-dimension-value", "required-flash-plugin-version", "required-flash-version", "size", "skippable", "ssl-compliant", "studio-advertiser-id", "studio-creative-id", "studio-trafficked-creative-id", "subaccount-id", "target-window-option", "third-party-backup-image-impressions-url", "third-party-rich-media-impressions-url", "time", "top", "total-file-size", "type", "value", "version", "video-description", "video-duration", "width", "window-height", "window-width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creatives().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creatives_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.creatives().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "types" => {
                    call = call.add_types(value.unwrap_or(""));
                },
                "studio-creative-id" => {
                    call = call.studio_creative_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "rendering-ids" => {
                    call = call.add_rendering_ids(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "creative-field-ids" => {
                    call = call.add_creative_field_ids(value.unwrap_or(""));
                },
                "companion-creative-ids" => {
                    call = call.add_companion_creative_ids(value.unwrap_or(""));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["advertiser-id", "archived", "search-string", "max-results", "campaign-id", "sort-field", "rendering-ids", "ids", "studio-creative-id", "size-ids", "page-token", "sort-order", "companion-creative-ids", "active", "creative-field-ids", "types"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creatives_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "ad-parameters", "ad-tag-keys", "advertiser-id", "allow-script-access", "archived", "artwork-type", "authoring-tool", "auto-advance-images", "background-color", "backup-image-click-through-url", "backup-image-features", "backup-image-reporting-label", "backup-image-target-window", "commercial-id", "companion-creatives", "compatibility", "convert-flash-to-html5", "custom-html", "custom-key-values", "dimension-name", "etag", "fs-command", "height", "html-code", "html-code-locked", "iab", "id", "id-dimension-value", "kind", "last-modified-info", "latest-trafficked-creative-id", "left", "match-type", "name", "override-css", "position-option", "redirect-url", "rendering-id", "rendering-id-dimension-value", "required-flash-plugin-version", "required-flash-version", "size", "skippable", "ssl-compliant", "studio-advertiser-id", "studio-creative-id", "studio-trafficked-creative-id", "subaccount-id", "target-window-option", "third-party-backup-image-impressions-url", "third-party-rich-media-impressions-url", "time", "top", "total-file-size", "type", "value", "version", "video-description", "video-duration", "width", "window-height", "window-width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creatives().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _creatives_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Creative::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_backup_image_target_window_init(request: &mut api::Creative) {
                if request.backup_image_target_window.is_none() {
                    request.backup_image_target_window = Some(Default::default());
                }
            }
            
            fn request_fs_command_init(request: &mut api::Creative) {
                if request.fs_command.is_none() {
                    request.fs_command = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Creative) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Creative) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_rendering_id_dimension_value_init(request: &mut api::Creative) {
                if request.rendering_id_dimension_value.is_none() {
                    request.rendering_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Creative) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "artwork-type" => {
                        request.artwork_type = Some(value.unwrap_or("").to_string());
                    },
                "latest-trafficked-creative-id" => {
                        request.latest_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-plugin-version" => {
                        request.required_flash_plugin_version = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.window-height" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_height = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-height", "integer"));
                    },
                "fs-command.top" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().top = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.top", "integer"));
                    },
                "fs-command.window-width" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().window_width = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.window-width", "integer"));
                    },
                "fs-command.position-option" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().position_option = Some(value.unwrap_or("").to_string());
                    },
                "fs-command.left" => {
                        request_fs_command_init(&mut request);
                        request.fs_command.as_mut().unwrap().left = Some(arg_from_str(value.unwrap_or("-0"), err, "fs-command.left", "integer"));
                    },
                "rendering-id-dimension-value.kind" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.value" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.dimension-name" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.etag" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.match-type" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "rendering-id-dimension-value.id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.rendering_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_rendering_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "studio-trafficked-creative-id" => {
                        request_size_init(&mut request);
                        request.studio_trafficked_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_size_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "override-css" => {
                        request_size_init(&mut request);
                        request.override_css = Some(value.unwrap_or("").to_string());
                    },
                "required-flash-version" => {
                        request_size_init(&mut request);
                        request.required_flash_version = Some(arg_from_str(value.unwrap_or("-0"), err, "required-flash-version", "integer"));
                    },
                "rendering-id" => {
                        request_size_init(&mut request);
                        request.rendering_id = Some(value.unwrap_or("").to_string());
                    },
                "video-description" => {
                        request_size_init(&mut request);
                        request.video_description = Some(value.unwrap_or("").to_string());
                    },
                "third-party-backup-image-impressions-url" => {
                        request_size_init(&mut request);
                        request.third_party_backup_image_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "version" => {
                        request_size_init(&mut request);
                        request.version = Some(arg_from_str(value.unwrap_or("-0"), err, "version", "integer"));
                    },
                "background-color" => {
                        request_size_init(&mut request);
                        request.background_color = Some(value.unwrap_or("").to_string());
                    },
                "custom-key-values" => {
                        request_size_init(&mut request);
                        if request.custom_key_values.is_none() {
                           request.custom_key_values = Some(Default::default());
                        }
                                        request.custom_key_values.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "html-code" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "total-file-size" => {
                        request_id_dimension_value_init(&mut request);
                        request.total_file_size = Some(value.unwrap_or("").to_string());
                    },
                "third-party-rich-media-impressions-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.third_party_rich_media_impressions_url = Some(value.unwrap_or("").to_string());
                    },
                "studio-advertiser-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.studio_advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "html-code-locked" => {
                        request_id_dimension_value_init(&mut request);
                        request.html_code_locked = Some(arg_from_str(value.unwrap_or("false"), err, "html-code-locked", "boolean"));
                    },
                "redirect-url" => {
                        request_id_dimension_value_init(&mut request);
                        request.redirect_url = Some(value.unwrap_or("").to_string());
                    },
                "commercial-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.commercial_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "backup-image-reporting-label" => {
                        request_id_dimension_value_init(&mut request);
                        request.backup_image_reporting_label = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_id_dimension_value_init(&mut request);
                        if request.compatibility.is_none() {
                           request.compatibility = Some(Default::default());
                        }
                                        request.compatibility.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "ad-parameters" => {
                        request_id_dimension_value_init(&mut request);
                        request.ad_parameters = Some(value.unwrap_or("").to_string());
                    },
                "ad-tag-keys" => {
                        request_id_dimension_value_init(&mut request);
                        if request.ad_tag_keys.is_none() {
                           request.ad_tag_keys = Some(Default::default());
                        }
                                        request.ad_tag_keys.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "convert-flash-to-html5" => {
                        request_id_dimension_value_init(&mut request);
                        request.convert_flash_to_html5 = Some(arg_from_str(value.unwrap_or("false"), err, "convert-flash-to-html5", "boolean"));
                    },
                "video-duration" => {
                        request_id_dimension_value_init(&mut request);
                        request.video_duration = Some(arg_from_str(value.unwrap_or("0.0"), err, "video-duration", "number"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-click-through-url" => {
                        request_last_modified_info_init(&mut request);
                        request.backup_image_click_through_url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_last_modified_info_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "studio-creative-id" => {
                        request_last_modified_info_init(&mut request);
                        request.studio_creative_id = Some(value.unwrap_or("").to_string());
                    },
                "authoring-tool" => {
                        request_last_modified_info_init(&mut request);
                        request.authoring_tool = Some(value.unwrap_or("").to_string());
                    },
                "allow-script-access" => {
                        request_last_modified_info_init(&mut request);
                        request.allow_script_access = Some(arg_from_str(value.unwrap_or("false"), err, "allow-script-access", "boolean"));
                    },
                "companion-creatives" => {
                        request_last_modified_info_init(&mut request);
                        if request.companion_creatives.is_none() {
                           request.companion_creatives = Some(Default::default());
                        }
                                        request.companion_creatives.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "auto-advance-images" => {
                        request_last_modified_info_init(&mut request);
                        request.auto_advance_images = Some(arg_from_str(value.unwrap_or("false"), err, "auto-advance-images", "boolean"));
                    },
                "backup-image-features" => {
                        request_last_modified_info_init(&mut request);
                        if request.backup_image_features.is_none() {
                           request.backup_image_features = Some(Default::default());
                        }
                                        request.backup_image_features.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.custom-html" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().custom_html = Some(value.unwrap_or("").to_string());
                    },
                "backup-image-target-window.target-window-option" => {
                        request_backup_image_target_window_init(&mut request);
                        request.backup_image_target_window.as_mut().unwrap().target_window_option = Some(value.unwrap_or("").to_string());
                    },
                "skippable" => {
                        request_backup_image_target_window_init(&mut request);
                        request.skippable = Some(arg_from_str(value.unwrap_or("false"), err, "skippable", "boolean"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "ad-parameters", "ad-tag-keys", "advertiser-id", "allow-script-access", "archived", "artwork-type", "authoring-tool", "auto-advance-images", "background-color", "backup-image-click-through-url", "backup-image-features", "backup-image-reporting-label", "backup-image-target-window", "commercial-id", "companion-creatives", "compatibility", "convert-flash-to-html5", "custom-html", "custom-key-values", "dimension-name", "etag", "fs-command", "height", "html-code", "html-code-locked", "iab", "id", "id-dimension-value", "kind", "last-modified-info", "latest-trafficked-creative-id", "left", "match-type", "name", "override-css", "position-option", "redirect-url", "rendering-id", "rendering-id-dimension-value", "required-flash-plugin-version", "required-flash-version", "size", "skippable", "ssl-compliant", "studio-advertiser-id", "studio-creative-id", "studio-trafficked-creative-id", "subaccount-id", "target-window-option", "third-party-backup-image-impressions-url", "third-party-rich-media-impressions-url", "time", "top", "total-file-size", "type", "value", "version", "video-description", "video-duration", "width", "window-height", "window-width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.creatives().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _dimension_values_query(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::DimensionValueRequest::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "dimension-name" => {
                        request.dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "start-date" => {
                        request.start_date = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "end-date" => {
                        request.end_date = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["dimension-name", "end-date", "kind", "start-date"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.dimension_values().query(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["page-token", "max-results"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _directory_site_contacts_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.directory_site_contacts().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _directory_site_contacts_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.directory_site_contacts().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "directory-site-ids", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _directory_sites_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.directory_sites().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _directory_sites_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::DirectorySite::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_id_dimension_value_init(request: &mut api::DirectorySite) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_settings_dfp_settings_init(request: &mut api::DirectorySite) {
                request_settings_init(request);
                if request.settings.as_mut().unwrap().dfp_settings.is_none() {
                    request.settings.as_mut().unwrap().dfp_settings = Some(Default::default());
                }
            }
            
            fn request_settings_init(request: &mut api::DirectorySite) {
                if request.settings.is_none() {
                    request.settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "country-id" => {
                        request.country_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "settings.nielsen-ocr-opt-out" => {
                        request_settings_init(&mut request);
                        request.settings.as_mut().unwrap().nielsen_ocr_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.nielsen-ocr-opt-out", "boolean"));
                    },
                "settings.active-view-opt-out" => {
                        request_settings_init(&mut request);
                        request.settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.active-view-opt-out", "boolean"));
                    },
                "settings.dfp-settings.dfp-network-name" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().dfp_network_name = Some(value.unwrap_or("").to_string());
                    },
                "settings.dfp-settings.publisher-portal-only" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().publisher_portal_only = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.publisher-portal-only", "boolean"));
                    },
                "settings.dfp-settings.programmatic-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().programmatic_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.programmatic-placement-accepted", "boolean"));
                    },
                "settings.dfp-settings.pub-paid-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().pub_paid_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.dfp-settings.pub-paid-placement-accepted", "boolean"));
                    },
                "settings.dfp-settings.dfp-network-code" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().dfp_settings.as_mut().unwrap().dfp_network_code = Some(value.unwrap_or("").to_string());
                    },
                "settings.verification-tag-opt-out" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().verification_tag_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.verification-tag-opt-out", "boolean"));
                    },
                "settings.instream-video-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().instream_video_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.instream-video-placement-accepted", "boolean"));
                    },
                "settings.interstitial-placement-accepted" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().interstitial_placement_accepted = Some(arg_from_str(value.unwrap_or("false"), err, "settings.interstitial-placement-accepted", "boolean"));
                    },
                "settings.video-active-view-opt-out" => {
                        request_settings_dfp_settings_init(&mut request);
                        request.settings.as_mut().unwrap().video_active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "settings.video-active-view-opt-out", "boolean"));
                    },
                "currency-id" => {
                        request_settings_init(&mut request);
                        request.currency_id = Some(value.unwrap_or("").to_string());
                    },
                "inpage-tag-formats" => {
                        request_settings_init(&mut request);
                        if request.inpage_tag_formats.is_none() {
                           request.inpage_tag_formats = Some(Default::default());
                        }
                                        request.inpage_tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request_settings_init(&mut request);
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "parent-id" => {
                        request_settings_init(&mut request);
                        request.parent_id = Some(value.unwrap_or("").to_string());
                    },
                "interstitial-tag-formats" => {
                        request_settings_init(&mut request);
                        if request.interstitial_tag_formats.is_none() {
                           request.interstitial_tag_formats = Some(Default::default());
                        }
                                        request.interstitial_tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_id_dimension_value_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["active", "active-view-opt-out", "country-id", "currency-id", "description", "dfp-network-code", "dfp-network-name", "dfp-settings", "dimension-name", "etag", "id", "id-dimension-value", "inpage-tag-formats", "instream-video-placement-accepted", "interstitial-placement-accepted", "interstitial-tag-formats", "kind", "match-type", "name", "nielsen-ocr-opt-out", "parent-id", "programmatic-placement-accepted", "pub-paid-placement-accepted", "publisher-portal-only", "settings", "url", "value", "verification-tag-opt-out", "video-active-view-opt-out"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.directory_sites().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _directory_sites_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.directory_sites().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "parent-id" => {
                    call = call.parent_id(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "dfp-network-code" => {
                    call = call.dfp_network_code(value.unwrap_or(""));
                },
                "country-id" => {
                    call = call.country_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                "accepts-publisher-paid-placements" => {
                    call = call.accepts_publisher_paid_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-publisher-paid-placements", "boolean"));
                },
                "accepts-interstitial-placements" => {
                    call = call.accepts_interstitial_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-interstitial-placements", "boolean"));
                },
                "accepts-in-stream-video-placements" => {
                    call = call.accepts_in_stream_video_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-in-stream-video-placements", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["accepts-interstitial-placements", "accepts-publisher-paid-placements", "search-string", "country-id", "accepts-in-stream-video-placements", "sort-field", "ids", "max-results", "page-token", "sort-order", "parent-id", "active", "dfp-network-code"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.event_tags().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.event_tags().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "campaign-id", "campaign-id-dimension-value", "dimension-name", "enabled-by-default", "etag", "id", "kind", "match-type", "name", "site-filter-type", "site-ids", "ssl-compliant", "status", "subaccount-id", "type", "url", "url-escape-levels", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.event_tags().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.event_tags().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "event-tag-types" => {
                    call = call.add_event_tag_types(value.unwrap_or(""));
                },
                "enabled" => {
                    call = call.enabled(arg_from_str(value.unwrap_or("false"), err, "enabled", "boolean"));
                },
                "definitions-only" => {
                    call = call.definitions_only(arg_from_str(value.unwrap_or("false"), err, "definitions-only", "boolean"));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                "ad-id" => {
                    call = call.ad_id(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "campaign-id", "sort-field", "enabled", "ids", "advertiser-id", "ad-id", "sort-order", "event-tag-types", "definitions-only"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "campaign-id", "campaign-id-dimension-value", "dimension-name", "enabled-by-default", "etag", "id", "kind", "match-type", "name", "site-filter-type", "site-ids", "ssl-compliant", "status", "subaccount-id", "type", "url", "url-escape-levels", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.event_tags().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _event_tags_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::EventTag::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::EventTag) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::EventTag) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "status" => {
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "site-ids" => {
                        if request.site_ids.is_none() {
                           request.site_ids = Some(Default::default());
                        }
                                        request.site_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "url-escape-levels" => {
                        request.url_escape_levels = Some(arg_from_str(value.unwrap_or("-0"), err, "url-escape-levels", "integer"));
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "enabled-by-default" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.enabled_by_default = Some(arg_from_str(value.unwrap_or("false"), err, "enabled-by-default", "boolean"));
                    },
                "advertiser-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "site-filter-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.site_filter_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "campaign-id", "campaign-id-dimension-value", "dimension-name", "enabled-by-default", "etag", "id", "kind", "match-type", "name", "site-filter-type", "site-ids", "ssl-compliant", "status", "subaccount-id", "type", "url", "url-escape-levels", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.event_tags().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _files_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut download_mode = false;
        let mut call = self.hub.files().get(opt.value_of("report-id").unwrap_or(""), opt.value_of("file-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            if key == "alt" && value.unwrap_or("unset") == "media" {
                                download_mode = true;
                            }
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    if !download_mode {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    } else {
                    io::copy(&mut response, &mut ostream).unwrap();
                    }
                    Ok(())
                }
            }
        }
    }

    fn _files_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.files().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "scope" => {
                    call = call.scope(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["sort-field", "max-results", "sort-order", "page-token", "scope"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activities().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_generatetag(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activities().generatetag(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "floodlight-activity-id" => {
                    call = call.floodlight_activity_id(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["floodlight-activity-id"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activities().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "cache-busting-type", "counting-method", "dimension-name", "etag", "expected-url", "floodlight-activity-group-id", "floodlight-activity-group-name", "floodlight-activity-group-tag-string", "floodlight-activity-group-type", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "hidden", "id", "id-dimension-value", "image-tag-enabled", "kind", "match-type", "name", "notes", "secure", "ssl-compliant", "ssl-required", "subaccount-id", "tag-format", "tag-string", "user-defined-variable-types", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activities().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "tag-string" => {
                    call = call.tag_string(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-id" => {
                    call = call.floodlight_configuration_id(value.unwrap_or(""));
                },
                "floodlight-activity-group-type" => {
                    call = call.floodlight_activity_group_type(value.unwrap_or(""));
                },
                "floodlight-activity-group-tag-string" => {
                    call = call.floodlight_activity_group_tag_string(value.unwrap_or(""));
                },
                "floodlight-activity-group-name" => {
                    call = call.floodlight_activity_group_name(value.unwrap_or(""));
                },
                "floodlight-activity-group-ids" => {
                    call = call.add_floodlight_activity_group_ids(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["floodlight-activity-group-ids", "search-string", "floodlight-activity-group-name", "sort-field", "floodlight-configuration-id", "ids", "max-results", "advertiser-id", "page-token", "sort-order", "tag-string", "floodlight-activity-group-tag-string", "floodlight-activity-group-type"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "cache-busting-type", "counting-method", "dimension-name", "etag", "expected-url", "floodlight-activity-group-id", "floodlight-activity-group-name", "floodlight-activity-group-tag-string", "floodlight-activity-group-type", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "hidden", "id", "id-dimension-value", "image-tag-enabled", "kind", "match-type", "name", "notes", "secure", "ssl-compliant", "ssl-required", "subaccount-id", "tag-format", "tag-string", "user-defined-variable-types", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activities_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivity::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivity) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "tag-string" => {
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "secure" => {
                        request.secure = Some(arg_from_str(value.unwrap_or("false"), err, "secure", "boolean"));
                    },
                "floodlight-activity-group-name" => {
                        request.floodlight_activity_group_name = Some(value.unwrap_or("").to_string());
                    },
                "image-tag-enabled" => {
                        request.image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "image-tag-enabled", "boolean"));
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_tag_string = Some(value.unwrap_or("").to_string());
                    },
                "ssl-compliant" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_compliant = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-compliant", "boolean"));
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "cache-busting-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.cache_busting_type = Some(value.unwrap_or("").to_string());
                    },
                "hidden" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.hidden = Some(arg_from_str(value.unwrap_or("false"), err, "hidden", "boolean"));
                    },
                "account-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "expected-url" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.expected_url = Some(value.unwrap_or("").to_string());
                    },
                "tag-format" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.tag_format = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "notes" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.notes = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "user-defined-variable-types" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        if request.user_defined_variable_types.is_none() {
                           request.user_defined_variable_types = Some(Default::default());
                        }
                                        request.user_defined_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "counting-method" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.counting_method = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-activity-group-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.floodlight_activity_group_type = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "cache-busting-type", "counting-method", "dimension-name", "etag", "expected-url", "floodlight-activity-group-id", "floodlight-activity-group-name", "floodlight-activity-group-tag-string", "floodlight-activity-group-type", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "hidden", "id", "id-dimension-value", "image-tag-enabled", "kind", "match-type", "name", "notes", "secure", "ssl-compliant", "ssl-required", "subaccount-id", "tag-format", "tag-string", "user-defined-variable-types", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activities().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activity_groups().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activity_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "subaccount-id", "tag-string", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_activity_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "type" => {
                    call = call.type_(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "floodlight-configuration-id" => {
                    call = call.floodlight_configuration_id(value.unwrap_or(""));
                },
                "advertiser-id" => {
                    call = call.advertiser_id(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "floodlight-configuration-id", "ids", "max-results", "advertiser-id", "page-token", "sort-order", "type"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "subaccount-id", "tag-string", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_activity_groups_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightActivityGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_floodlight_configuration_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.floodlight_configuration_id_dimension_value.is_none() {
                    request.floodlight_configuration_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightActivityGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id" => {
                        request.floodlight_configuration_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.kind" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.value" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.dimension-name" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.etag" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.match-type" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-configuration-id-dimension-value.id" => {
                        request_floodlight_configuration_id_dimension_value_init(&mut request);
                        request.floodlight_configuration_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "tag-string" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.tag_string = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "dimension-name", "etag", "floodlight-configuration-id", "floodlight-configuration-id-dimension-value", "id", "id-dimension-value", "kind", "match-type", "name", "subaccount-id", "tag-string", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_activity_groups().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_configurations_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_configurations().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_configurations_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.floodlight_configurations().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["ids"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_configurations_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightConfiguration::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::FloodlightConfiguration) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_omniture_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.omniture_settings.is_none() {
                    request.omniture_settings = Some(Default::default());
                }
            }
            
            fn request_tag_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.tag_settings.is_none() {
                    request.tag_settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "natural-search-conversion-attribution-option" => {
                        request.natural_search_conversion_attribution_option = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "exposure-to-conversion-enabled" => {
                        request.exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "exposure-to-conversion-enabled", "boolean"));
                    },
                "analytics-data-sharing-enabled" => {
                        request.analytics_data_sharing_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "analytics-data-sharing-enabled", "boolean"));
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "first-day-of-week" => {
                        request_lookback_configuration_init(&mut request);
                        request.first_day_of_week = Some(value.unwrap_or("").to_string());
                    },
                "standard-variable-types" => {
                        request_lookback_configuration_init(&mut request);
                        if request.standard_variable_types.is_none() {
                           request.standard_variable_types = Some(Default::default());
                        }
                                        request.standard_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "omniture-settings.omniture-cost-data-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_cost_data_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-cost-data-enabled", "boolean"));
                    },
                "omniture-settings.omniture-integration-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_integration_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-integration-enabled", "boolean"));
                    },
                "subaccount-id" => {
                        request_omniture_settings_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_omniture_settings_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "tag-settings.dynamic-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().dynamic_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.dynamic-tag-enabled", "boolean"));
                    },
                "tag-settings.image-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.image-tag-enabled", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "analytics-data-sharing-enabled", "click-duration", "dimension-name", "dynamic-tag-enabled", "etag", "exposure-to-conversion-enabled", "first-day-of-week", "id", "id-dimension-value", "image-tag-enabled", "kind", "lookback-configuration", "match-type", "natural-search-conversion-attribution-option", "omniture-cost-data-enabled", "omniture-integration-enabled", "omniture-settings", "post-impression-activities-duration", "ssl-required", "standard-variable-types", "subaccount-id", "tag-settings", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_configurations().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _floodlight_configurations_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::FloodlightConfiguration::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::FloodlightConfiguration) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::FloodlightConfiguration) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_omniture_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.omniture_settings.is_none() {
                    request.omniture_settings = Some(Default::default());
                }
            }
            
            fn request_tag_settings_init(request: &mut api::FloodlightConfiguration) {
                if request.tag_settings.is_none() {
                    request.tag_settings = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "natural-search-conversion-attribution-option" => {
                        request.natural_search_conversion_attribution_option = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "exposure-to-conversion-enabled" => {
                        request.exposure_to_conversion_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "exposure-to-conversion-enabled", "boolean"));
                    },
                "analytics-data-sharing-enabled" => {
                        request.analytics_data_sharing_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "analytics-data-sharing-enabled", "boolean"));
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "first-day-of-week" => {
                        request_lookback_configuration_init(&mut request);
                        request.first_day_of_week = Some(value.unwrap_or("").to_string());
                    },
                "standard-variable-types" => {
                        request_lookback_configuration_init(&mut request);
                        if request.standard_variable_types.is_none() {
                           request.standard_variable_types = Some(Default::default());
                        }
                                        request.standard_variable_types.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "omniture-settings.omniture-cost-data-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_cost_data_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-cost-data-enabled", "boolean"));
                    },
                "omniture-settings.omniture-integration-enabled" => {
                        request_omniture_settings_init(&mut request);
                        request.omniture_settings.as_mut().unwrap().omniture_integration_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "omniture-settings.omniture-integration-enabled", "boolean"));
                    },
                "subaccount-id" => {
                        request_omniture_settings_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_omniture_settings_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "tag-settings.dynamic-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().dynamic_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.dynamic-tag-enabled", "boolean"));
                    },
                "tag-settings.image-tag-enabled" => {
                        request_tag_settings_init(&mut request);
                        request.tag_settings.as_mut().unwrap().image_tag_enabled = Some(arg_from_str(value.unwrap_or("false"), err, "tag-settings.image-tag-enabled", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "ssl-required" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "analytics-data-sharing-enabled", "click-duration", "dimension-name", "dynamic-tag-enabled", "etag", "exposure-to-conversion-enabled", "first-day-of-week", "id", "id-dimension-value", "image-tag-enabled", "kind", "lookback-configuration", "match-type", "natural-search-conversion-attribution-option", "omniture-cost-data-enabled", "omniture-integration-enabled", "omniture-settings", "post-impression-activities-duration", "ssl-required", "standard-variable-types", "subaccount-id", "tag-settings", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.floodlight_configurations().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _inventory_items_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.inventory_items().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _inventory_items_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.inventory_items().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "order-id" => {
                    call = call.add_order_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "in-plan" => {
                    call = call.in_plan(arg_from_str(value.unwrap_or("false"), err, "in-plan", "boolean"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["order-id", "sort-field", "ids", "max-results", "page-token", "in-plan", "site-id", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.landing_pages().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.landing_pages().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["default", "id", "kind", "name", "url"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.landing_pages().insert(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.landing_pages().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["default", "id", "kind", "name", "url"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.landing_pages().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _landing_pages_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::LandingPage::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default" => {
                        request.default = Some(arg_from_str(value.unwrap_or("false"), err, "default", "boolean"));
                    },
                "url" => {
                        request.url = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["default", "id", "kind", "name", "url"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.landing_pages().update(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("campaign-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _metros_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.metros().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _mobile_carriers_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.mobile_carriers().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _mobile_carriers_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.mobile_carriers().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _operating_system_versions_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.operating_system_versions().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _operating_system_versions_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.operating_system_versions().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _operating_systems_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.operating_systems().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("dart-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _operating_systems_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.operating_systems().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _order_documents_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.order_documents().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _order_documents_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.order_documents().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "order-id" => {
                    call = call.add_order_id(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "approved" => {
                    call = call.approved(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["order-id", "search-string", "sort-field", "ids", "max-results", "page-token", "site-id", "sort-order", "approved"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _orders_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.orders().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _orders_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.orders().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("project-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-id" => {
                    call = call.add_site_id(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "site-id", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placement_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_groups_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "adx-deal-ids", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "child-placement-ids", "comment", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "id", "id-dimension-value", "insertion-order-id", "insertion-order-id-status", "kind", "last-modified-info", "match-type", "media-cost-nanos", "name", "placement-group-type", "placement-strategy-id", "pricing-schedule", "pricing-type", "primary-placement-id", "primary-placement-id-dimension-value", "programmatic", "programmatic-setting", "site-id", "site-id-dimension-value", "start-date", "subaccount-id", "testing-start-date", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_groups().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placement_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "site-ids" => {
                    call = call.add_site_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "pricing-types" => {
                    call = call.add_pricing_types(value.unwrap_or(""));
                },
                "placement-strategy-ids" => {
                    call = call.add_placement_strategy_ids(value.unwrap_or(""));
                },
                "placement-group-type" => {
                    call = call.placement_group_type(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "content-category-ids" => {
                    call = call.add_content_category_ids(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["placement-strategy-ids", "site-ids", "search-string", "content-category-ids", "directory-site-ids", "sort-field", "advertiser-ids", "archived", "ids", "max-results", "page-token", "sort-order", "placement-group-type", "pricing-types", "campaign-ids"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_groups_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "adx-deal-ids", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "child-placement-ids", "comment", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "id", "id-dimension-value", "insertion-order-id", "insertion-order-id-status", "kind", "last-modified-info", "match-type", "media-cost-nanos", "name", "placement-group-type", "placement-strategy-id", "pricing-schedule", "pricing-type", "primary-placement-id", "primary-placement-id-dimension-value", "programmatic", "programmatic-setting", "site-id", "site-id-dimension-value", "start-date", "subaccount-id", "testing-start-date", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_groups().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_groups_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementGroup::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::PlacementGroup) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::PlacementGroup) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::PlacementGroup) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_primary_placement_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.primary_placement_id_dimension_value.is_none() {
                    request.primary_placement_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_programmatic_setting_init(request: &mut api::PlacementGroup) {
                if request.programmatic_setting.is_none() {
                    request.programmatic_setting = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::PlacementGroup) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id" => {
                        request.primary_placement_id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.placement_group_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.trafficker-emails" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().trafficker_emails.is_none() {
                           request.programmatic_setting.as_mut().unwrap().trafficker_emails = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().trafficker_emails.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.programmatic" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().programmatic = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.programmatic", "boolean"));
                    },
                "programmatic-setting.insertion-order-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id = Some(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.insertion-order-id-status" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().insertion_order_id_status = Some(arg_from_str(value.unwrap_or("false"), err, "programmatic-setting.insertion-order-id-status", "boolean"));
                    },
                "programmatic-setting.adx-deal-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.programmatic_setting.as_mut().unwrap().adx_deal_ids.is_none() {
                           request.programmatic_setting.as_mut().unwrap().adx_deal_ids = Some(Default::default());
                        }
                                        request.programmatic_setting.as_mut().unwrap().adx_deal_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "programmatic-setting.media-cost-nanos" => {
                        request_programmatic_setting_init(&mut request);
                        request.programmatic_setting.as_mut().unwrap().media_cost_nanos = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_programmatic_setting_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "child-placement-ids" => {
                        request_programmatic_setting_init(&mut request);
                        if request.child_placement_ids.is_none() {
                           request.child_placement_ids = Some(Default::default());
                        }
                                        request.child_placement_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_programmatic_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.kind" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.value" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.dimension-name" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.etag" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.match-type" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "primary-placement-id-dimension-value.id" => {
                        request_primary_placement_id_dimension_value_init(&mut request);
                        request.primary_placement_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "advertiser-id", "advertiser-id-dimension-value", "adx-deal-ids", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "child-placement-ids", "comment", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "id", "id-dimension-value", "insertion-order-id", "insertion-order-id-status", "kind", "last-modified-info", "match-type", "media-cost-nanos", "name", "placement-group-type", "placement-strategy-id", "pricing-schedule", "pricing-type", "primary-placement-id", "primary-placement-id-dimension-value", "programmatic", "programmatic-setting", "site-id", "site-id-dimension-value", "start-date", "subaccount-id", "testing-start-date", "time", "trafficker-emails", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_groups().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placement_strategies().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placement_strategies().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_strategies().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placement_strategies().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_strategies().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placement_strategies_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::PlacementStrategy::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placement_strategies().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_generatetags(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placements().generatetags(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "tag-formats" => {
                    call = call.add_tag_formats(value.unwrap_or(""));
                },
                "placement-ids" => {
                    call = call.add_placement_ids(value.unwrap_or(""));
                },
                "campaign-id" => {
                    call = call.campaign_id(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["tag-formats", "placement-ids", "campaign-id"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placements().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "additional-key-values", "advertiser-id", "advertiser-id-dimension-value", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "click-duration", "comment", "compatibility", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "height", "iab", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "payment-approved", "payment-source", "placement-group-id", "placement-group-id-dimension-value", "placement-strategy-id", "post-impression-activities-duration", "pricing-schedule", "pricing-type", "primary", "publisher-update-info", "site-id", "site-id-dimension-value", "size", "ssl-required", "start-date", "status", "subaccount-id", "tag-formats", "tag-setting", "testing-start-date", "time", "value", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placements().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.placements().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "size-ids" => {
                    call = call.add_size_ids(value.unwrap_or(""));
                },
                "site-ids" => {
                    call = call.add_site_ids(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "pricing-types" => {
                    call = call.add_pricing_types(value.unwrap_or(""));
                },
                "placement-strategy-ids" => {
                    call = call.add_placement_strategy_ids(value.unwrap_or(""));
                },
                "payment-source" => {
                    call = call.payment_source(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "group-ids" => {
                    call = call.add_group_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "content-category-ids" => {
                    call = call.add_content_category_ids(value.unwrap_or(""));
                },
                "compatibilities" => {
                    call = call.add_compatibilities(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "archived" => {
                    call = call.archived(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["placement-strategy-ids", "site-ids", "search-string", "content-category-ids", "directory-site-ids", "sort-field", "advertiser-ids", "archived", "payment-source", "ids", "max-results", "size-ids", "page-token", "compatibilities", "sort-order", "pricing-types", "campaign-ids", "group-ids"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "additional-key-values", "advertiser-id", "advertiser-id-dimension-value", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "click-duration", "comment", "compatibility", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "height", "iab", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "payment-approved", "payment-source", "placement-group-id", "placement-group-id-dimension-value", "placement-strategy-id", "post-impression-activities-duration", "pricing-schedule", "pricing-type", "primary", "publisher-update-info", "site-id", "site-id-dimension-value", "size", "ssl-required", "start-date", "status", "subaccount-id", "tag-formats", "tag-setting", "testing-start-date", "time", "value", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placements().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _placements_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Placement::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::Placement) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_campaign_id_dimension_value_init(request: &mut api::Placement) {
                if request.campaign_id_dimension_value.is_none() {
                    request.campaign_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_create_info_init(request: &mut api::Placement) {
                if request.create_info.is_none() {
                    request.create_info = Some(Default::default());
                }
            }
            
            fn request_directory_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Placement) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_last_modified_info_init(request: &mut api::Placement) {
                if request.last_modified_info.is_none() {
                    request.last_modified_info = Some(Default::default());
                }
            }
            
            fn request_lookback_configuration_init(request: &mut api::Placement) {
                if request.lookback_configuration.is_none() {
                    request.lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_placement_group_id_dimension_value_init(request: &mut api::Placement) {
                if request.placement_group_id_dimension_value.is_none() {
                    request.placement_group_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_pricing_schedule_init(request: &mut api::Placement) {
                if request.pricing_schedule.is_none() {
                    request.pricing_schedule = Some(Default::default());
                }
            }
            
            fn request_publisher_update_info_init(request: &mut api::Placement) {
                if request.publisher_update_info.is_none() {
                    request.publisher_update_info = Some(Default::default());
                }
            }
            
            fn request_site_id_dimension_value_init(request: &mut api::Placement) {
                if request.site_id_dimension_value.is_none() {
                    request.site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_size_init(request: &mut api::Placement) {
                if request.size.is_none() {
                    request.size = Some(Default::default());
                }
            }
            
            fn request_tag_setting_init(request: &mut api::Placement) {
                if request.tag_setting.is_none() {
                    request.tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "comment" => {
                        request.comment = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id" => {
                        request.campaign_id = Some(value.unwrap_or("").to_string());
                    },
                "payment-source" => {
                        request.payment_source = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "archived" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.archived = Some(arg_from_str(value.unwrap_or("false"), err, "archived", "boolean"));
                    },
                "publisher-update-info.time" => {
                        request_publisher_update_info_init(&mut request);
                        request.publisher_update_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "tag-formats" => {
                        request_publisher_update_info_init(&mut request);
                        if request.tag_formats.is_none() {
                           request.tag_formats = Some(Default::default());
                        }
                                        request.tag_formats.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "payment-approved" => {
                        request_publisher_update_info_init(&mut request);
                        request.payment_approved = Some(arg_from_str(value.unwrap_or("false"), err, "payment-approved", "boolean"));
                    },
                "tag-setting.include-click-through-urls" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-through-urls", "boolean"));
                    },
                "tag-setting.include-click-tracking" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "tag-setting.include-click-tracking", "boolean"));
                    },
                "tag-setting.additional-key-values" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "tag-setting.keyword-option" => {
                        request_tag_setting_init(&mut request);
                        request.tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "content-category-id" => {
                        request_tag_setting_init(&mut request);
                        request.content_category_id = Some(value.unwrap_or("").to_string());
                    },
                "external-id" => {
                        request_tag_setting_init(&mut request);
                        request.external_id = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.width" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().width = Some(arg_from_str(value.unwrap_or("-0"), err, "size.width", "integer"));
                    },
                "size.kind" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "size.iab" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().iab = Some(arg_from_str(value.unwrap_or("false"), err, "size.iab", "boolean"));
                    },
                "size.id" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "size.height" => {
                        request_size_init(&mut request);
                        request.size.as_mut().unwrap().height = Some(arg_from_str(value.unwrap_or("-0"), err, "size.height", "integer"));
                    },
                "ssl-required" => {
                        request_size_init(&mut request);
                        request.ssl_required = Some(arg_from_str(value.unwrap_or("false"), err, "ssl-required", "boolean"));
                    },
                "status" => {
                        request_size_init(&mut request);
                        request.status = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.kind" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.value" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.dimension-name" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.etag" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.match-type" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "campaign-id-dimension-value.id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.campaign_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "primary" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.primary = Some(arg_from_str(value.unwrap_or("false"), err, "primary", "boolean"));
                    },
                "placement-group-id" => {
                        request_campaign_id_dimension_value_init(&mut request);
                        request.placement_group_id = Some(value.unwrap_or("").to_string());
                    },
                "create-info.time" => {
                        request_create_info_init(&mut request);
                        request.create_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "site-id" => {
                        request_create_info_init(&mut request);
                        request.site_id = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.kind" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.value" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.dimension-name" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.etag" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.match-type" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "site-id-dimension-value.id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "compatibility" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.compatibility = Some(value.unwrap_or("").to_string());
                    },
                "placement-strategy-id" => {
                        request_site_id_dimension_value_init(&mut request);
                        request.placement_strategy_id = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.value" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.dimension-name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.etag" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.match-type" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "placement-group-id-dimension-value.id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.placement_group_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_placement_group_id_dimension_value_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "lookback-configuration.click-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.click-duration", "integer"));
                    },
                "lookback-configuration.post-impression-activities-duration" => {
                        request_lookback_configuration_init(&mut request);
                        request.lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "last-modified-info.time" => {
                        request_last_modified_info_init(&mut request);
                        request.last_modified_info.as_mut().unwrap().time = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.end-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.flighted" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().flighted = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.flighted", "boolean"));
                    },
                "pricing-schedule.disregard-overdelivery" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().disregard_overdelivery = Some(arg_from_str(value.unwrap_or("false"), err, "pricing-schedule.disregard-overdelivery", "boolean"));
                    },
                "pricing-schedule.pricing-type" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().pricing_type = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.cap-cost-option" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().cap_cost_option = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.testing-start-date" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().testing_start_date = Some(value.unwrap_or("").to_string());
                    },
                "pricing-schedule.floodlight-activity-id" => {
                        request_pricing_schedule_init(&mut request);
                        request.pricing_schedule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "additional-key-values", "advertiser-id", "advertiser-id-dimension-value", "archived", "campaign-id", "campaign-id-dimension-value", "cap-cost-option", "click-duration", "comment", "compatibility", "content-category-id", "create-info", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disregard-overdelivery", "end-date", "etag", "external-id", "flighted", "floodlight-activity-id", "height", "iab", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "last-modified-info", "lookback-configuration", "match-type", "name", "payment-approved", "payment-source", "placement-group-id", "placement-group-id-dimension-value", "placement-strategy-id", "post-impression-activities-duration", "pricing-schedule", "pricing-type", "primary", "publisher-update-info", "site-id", "site-id-dimension-value", "size", "ssl-required", "start-date", "status", "subaccount-id", "tag-formats", "tag-setting", "testing-start-date", "time", "value", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.placements().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _platform_types_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.platform_types().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _platform_types_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.platform_types().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _postal_codes_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.postal_codes().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("code").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _postal_codes_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.postal_codes().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _projects_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.projects().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _projects_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.projects().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "advertiser-ids" => {
                    call = call.add_advertiser_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "advertiser-ids", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _regions_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.regions().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_list_shares_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.remarketing_list_shares().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("remarketing-list-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_list_shares_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::RemarketingListShare::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "shared-advertiser-ids" => {
                        if request.shared_advertiser_ids.is_none() {
                           request.shared_advertiser_ids = Some(Default::default());
                        }
                                        request.shared_advertiser_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-id" => {
                        request.remarketing_list_id = Some(value.unwrap_or("").to_string());
                    },
                "shared-account-ids" => {
                        if request.shared_account_ids.is_none() {
                           request.shared_account_ids = Some(Default::default());
                        }
                                        request.shared_account_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["kind", "remarketing-list-id", "shared-account-ids", "shared-advertiser-ids"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.remarketing_list_shares().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("remarketing-list-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_list_shares_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::RemarketingListShare::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "shared-advertiser-ids" => {
                        if request.shared_advertiser_ids.is_none() {
                           request.shared_advertiser_ids = Some(Default::default());
                        }
                                        request.shared_advertiser_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "remarketing-list-id" => {
                        request.remarketing_list_id = Some(value.unwrap_or("").to_string());
                    },
                "shared-account-ids" => {
                        if request.shared_account_ids.is_none() {
                           request.shared_account_ids = Some(Default::default());
                        }
                                        request.shared_account_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["kind", "remarketing-list-id", "shared-account-ids", "shared-advertiser-ids"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.remarketing_list_shares().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_lists_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.remarketing_lists().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_lists_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "description", "dimension-name", "etag", "floodlight-activity-id", "floodlight-activity-name", "id", "kind", "life-span", "list-population-rule", "list-size", "list-source", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_lists_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.remarketing_lists().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("advertiser-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "name" => {
                    call = call.name(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "floodlight-activity-id" => {
                    call = call.floodlight_activity_id(value.unwrap_or(""));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["name", "sort-field", "max-results", "page-token", "sort-order", "active", "floodlight-activity-id"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_lists_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "description", "dimension-name", "etag", "floodlight-activity-id", "floodlight-activity-name", "id", "kind", "life-span", "list-population-rule", "list-size", "list-source", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _remarketing_lists_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::RemarketingList::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_advertiser_id_dimension_value_init(request: &mut api::RemarketingList) {
                if request.advertiser_id_dimension_value.is_none() {
                    request.advertiser_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_list_population_rule_init(request: &mut api::RemarketingList) {
                if request.list_population_rule.is_none() {
                    request.list_population_rule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "list-population-rule.floodlight-activity-name" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_name = Some(value.unwrap_or("").to_string());
                    },
                "list-population-rule.floodlight-activity-id" => {
                        request_list_population_rule_init(&mut request);
                        request.list_population_rule.as_mut().unwrap().floodlight_activity_id = Some(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_list_population_rule_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request_list_population_rule_init(&mut request);
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "description" => {
                        request_list_population_rule_init(&mut request);
                        request.description = Some(value.unwrap_or("").to_string());
                    },
                "list-size" => {
                        request_list_population_rule_init(&mut request);
                        request.list_size = Some(value.unwrap_or("").to_string());
                    },
                "life-span" => {
                        request_list_population_rule_init(&mut request);
                        request.life_span = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_list_population_rule_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id" => {
                        request_list_population_rule_init(&mut request);
                        request.advertiser_id = Some(value.unwrap_or("").to_string());
                    },
                "active" => {
                        request_list_population_rule_init(&mut request);
                        request.active = Some(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                    },
                "advertiser-id-dimension-value.kind" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.value" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.dimension-name" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.etag" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.match-type" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "advertiser-id-dimension-value.id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.advertiser_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "list-source" => {
                        request_advertiser_id_dimension_value_init(&mut request);
                        request.list_source = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "advertiser-id", "advertiser-id-dimension-value", "description", "dimension-name", "etag", "floodlight-activity-id", "floodlight-activity-name", "id", "kind", "life-span", "list-population-rule", "list-size", "list-source", "match-type", "name", "subaccount-id", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.remarketing_lists().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_compatible_fields_query(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "activities", "clicks-lookback-window", "criteria", "cross-dimension-reach-criteria", "custom-rich-media-events", "date-range", "delivery", "dimension", "dimension-name", "email-owner", "email-owner-delivery-type", "enable-all-dimension-combinations", "end-date", "etag", "every", "expiration-date", "file-name", "floodlight-config-id", "floodlight-criteria", "format", "id", "impressions-lookback-window", "include-attributed-ip-conversions", "include-unattributed-cookie-conversions", "include-unattributed-ip-conversions", "kind", "last-modified-time", "match-type", "maximum-click-interactions", "maximum-impression-interactions", "maximum-interaction-gap", "message", "metric-names", "name", "overlap-metric-names", "owner-profile-id", "path-to-conversion-criteria", "pivot-on-interaction-path", "pivoted", "reach-by-frequency-metric-names", "reach-criteria", "relative-date-range", "repeats", "repeats-on-week-days", "report-properties", "runs-on-day-of-month", "schedule", "start-date", "sub-account-id", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.reports().compatible_fields_query(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.reports().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _reports_files_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut download_mode = false;
        let mut call = self.hub.reports().files_get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""), opt.value_of("file-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            if key == "alt" && value.unwrap_or("unset") == "media" {
                                download_mode = true;
                            }
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    if !download_mode {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    } else {
                    io::copy(&mut response, &mut ostream).unwrap();
                    }
                    Ok(())
                }
            }
        }
    }

    fn _reports_files_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.reports().files_list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["sort-field", "sort-order", "max-results", "page-token"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.reports().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "activities", "clicks-lookback-window", "criteria", "cross-dimension-reach-criteria", "custom-rich-media-events", "date-range", "delivery", "dimension", "dimension-name", "email-owner", "email-owner-delivery-type", "enable-all-dimension-combinations", "end-date", "etag", "every", "expiration-date", "file-name", "floodlight-config-id", "floodlight-criteria", "format", "id", "impressions-lookback-window", "include-attributed-ip-conversions", "include-unattributed-cookie-conversions", "include-unattributed-ip-conversions", "kind", "last-modified-time", "match-type", "maximum-click-interactions", "maximum-impression-interactions", "maximum-interaction-gap", "message", "metric-names", "name", "overlap-metric-names", "owner-profile-id", "path-to-conversion-criteria", "pivot-on-interaction-path", "pivoted", "reach-by-frequency-metric-names", "reach-criteria", "relative-date-range", "repeats", "repeats-on-week-days", "report-properties", "runs-on-day-of-month", "schedule", "start-date", "sub-account-id", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.reports().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.reports().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "scope" => {
                    call = call.scope(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["sort-field", "max-results", "sort-order", "page-token", "scope"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "activities", "clicks-lookback-window", "criteria", "cross-dimension-reach-criteria", "custom-rich-media-events", "date-range", "delivery", "dimension", "dimension-name", "email-owner", "email-owner-delivery-type", "enable-all-dimension-combinations", "end-date", "etag", "every", "expiration-date", "file-name", "floodlight-config-id", "floodlight-criteria", "format", "id", "impressions-lookback-window", "include-attributed-ip-conversions", "include-unattributed-cookie-conversions", "include-unattributed-ip-conversions", "kind", "last-modified-time", "match-type", "maximum-click-interactions", "maximum-impression-interactions", "maximum-interaction-gap", "message", "metric-names", "name", "overlap-metric-names", "owner-profile-id", "path-to-conversion-criteria", "pivot-on-interaction-path", "pivoted", "reach-by-frequency-metric-names", "reach-criteria", "relative-date-range", "repeats", "repeats-on-week-days", "report-properties", "runs-on-day-of-month", "schedule", "start-date", "sub-account-id", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.reports().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_run(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.reports().run(opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "synchronous" => {
                    call = call.synchronous(arg_from_str(value.unwrap_or("false"), err, "synchronous", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["synchronous"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _reports_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Report::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_criteria_activities_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().activities.is_none() {
                    request.criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_criteria_date_range_init(request: &mut api::Report) {
                request_criteria_init(request);
                if request.criteria.as_mut().unwrap().date_range.is_none() {
                    request.criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_criteria_init(request: &mut api::Report) {
                if request.criteria.is_none() {
                    request.criteria = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_date_range_init(request: &mut api::Report) {
                request_cross_dimension_reach_criteria_init(request);
                if request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.cross_dimension_reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_cross_dimension_reach_criteria_init(request: &mut api::Report) {
                if request.cross_dimension_reach_criteria.is_none() {
                    request.cross_dimension_reach_criteria = Some(Default::default());
                }
            }
            
            fn request_delivery_init(request: &mut api::Report) {
                if request.delivery.is_none() {
                    request.delivery = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_date_range_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().date_range.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_init(request: &mut api::Report) {
                if request.floodlight_criteria.is_none() {
                    request.floodlight_criteria = Some(Default::default());
                }
            }
            
            fn request_floodlight_criteria_report_properties_init(request: &mut api::Report) {
                request_floodlight_criteria_init(request);
                if request.floodlight_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.floodlight_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_date_range_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().date_range.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_floodlight_config_id_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_init(request: &mut api::Report) {
                if request.path_to_conversion_criteria.is_none() {
                    request.path_to_conversion_criteria = Some(Default::default());
                }
            }
            
            fn request_path_to_conversion_criteria_report_properties_init(request: &mut api::Report) {
                request_path_to_conversion_criteria_init(request);
                if request.path_to_conversion_criteria.as_mut().unwrap().report_properties.is_none() {
                    request.path_to_conversion_criteria.as_mut().unwrap().report_properties = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_activities_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().activities.is_none() {
                    request.reach_criteria.as_mut().unwrap().activities = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_custom_rich_media_events_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().custom_rich_media_events.is_none() {
                    request.reach_criteria.as_mut().unwrap().custom_rich_media_events = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_date_range_init(request: &mut api::Report) {
                request_reach_criteria_init(request);
                if request.reach_criteria.as_mut().unwrap().date_range.is_none() {
                    request.reach_criteria.as_mut().unwrap().date_range = Some(Default::default());
                }
            }
            
            fn request_reach_criteria_init(request: &mut api::Report) {
                if request.reach_criteria.is_none() {
                    request.reach_criteria = Some(Default::default());
                }
            }
            
            fn request_schedule_init(request: &mut api::Report) {
                if request.schedule.is_none() {
                    request.schedule = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "criteria.activities.kind" => {
                        request_criteria_activities_init(&mut request);
                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.activities.metric-names" => {
                        request_criteria_activities_init(&mut request);
                        if request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.start-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.kind" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.end-date" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "criteria.date-range.relative-date-range" => {
                        request_criteria_date_range_init(&mut request);
                        request.criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "criteria.custom-rich-media-events.kind" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        request.criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "criteria.metric-names" => {
                        request_criteria_custom_rich_media_events_init(&mut request);
                        if request.criteria.as_mut().unwrap().metric_names.is_none() {
                           request.criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "kind" => {
                        request_criteria_init(&mut request);
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "sub-account-id" => {
                        request_criteria_init(&mut request);
                        request.sub_account_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request_criteria_init(&mut request);
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "schedule.start-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.runs-on-day-of-month" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().runs_on_day_of_month = Some(value.unwrap_or("").to_string());
                    },
                "schedule.every" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().every = Some(arg_from_str(value.unwrap_or("-0"), err, "schedule.every", "integer"));
                    },
                "schedule.expiration-date" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().expiration_date = Some(value.unwrap_or("").to_string());
                    },
                "schedule.active" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().active = Some(arg_from_str(value.unwrap_or("false"), err, "schedule.active", "boolean"));
                    },
                "schedule.repeats" => {
                        request_schedule_init(&mut request);
                        request.schedule.as_mut().unwrap().repeats = Some(value.unwrap_or("").to_string());
                    },
                "schedule.repeats-on-week-days" => {
                        request_schedule_init(&mut request);
                        if request.schedule.as_mut().unwrap().repeats_on_week_days.is_none() {
                           request.schedule.as_mut().unwrap().repeats_on_week_days = Some(Default::default());
                        }
                                        request.schedule.as_mut().unwrap().repeats_on_week_days.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.start-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.kind" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.end-date" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.date-range.relative-date-range" => {
                        request_path_to_conversion_criteria_date_range_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.kind" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.value" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.dimension-name" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.etag" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.match-type" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.floodlight-config-id.id" => {
                        request_path_to_conversion_criteria_floodlight_config_id_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "path-to-conversion-criteria.report-properties.clicks-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().clicks_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.clicks-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.pivot-on-interaction-path" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().pivot_on_interaction_path = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.pivot-on-interaction-path", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.impressions-lookback-window" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().impressions_lookback_window = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.impressions-lookback-window", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-interaction-gap" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_interaction_gap = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-interaction-gap", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "path-to-conversion-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-click-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_click_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-click-interactions", "integer"));
                    },
                "path-to-conversion-criteria.report-properties.maximum-impression-interactions" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        request.path_to_conversion_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().maximum_impression_interactions = Some(arg_from_str(value.unwrap_or("-0"), err, "path-to-conversion-criteria.report-properties.maximum-impression-interactions", "integer"));
                    },
                "path-to-conversion-criteria.metric-names" => {
                        request_path_to_conversion_criteria_report_properties_init(&mut request);
                        if request.path_to_conversion_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.path_to_conversion_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.path_to_conversion_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "format" => {
                        request_path_to_conversion_criteria_init(&mut request);
                        request.format = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.kind" => {
                        request_reach_criteria_activities_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.activities.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().activities.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.metric-names" => {
                        request_reach_criteria_activities_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.start-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.kind" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.end-date" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.date-range.relative-date-range" => {
                        request_reach_criteria_date_range_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.reach-by-frequency-metric-names" => {
                        request_reach_criteria_date_range_init(&mut request);
                        if request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.is_none() {
                           request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names = Some(Default::default());
                        }
                                        request.reach_criteria.as_mut().unwrap().reach_by_frequency_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "reach-criteria.custom-rich-media-events.kind" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().custom_rich_media_events.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "reach-criteria.enable-all-dimension-combinations" => {
                        request_reach_criteria_custom_rich_media_events_init(&mut request);
                        request.reach_criteria.as_mut().unwrap().enable_all_dimension_combinations = Some(arg_from_str(value.unwrap_or("false"), err, "reach-criteria.enable-all-dimension-combinations", "boolean"));
                    },
                "file-name" => {
                        request_reach_criteria_init(&mut request);
                        request.file_name = Some(value.unwrap_or("").to_string());
                    },
                "delivery.message" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().message = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner-delivery-type" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner_delivery_type = Some(value.unwrap_or("").to_string());
                    },
                "delivery.email-owner" => {
                        request_delivery_init(&mut request);
                        request.delivery.as_mut().unwrap().email_owner = Some(arg_from_str(value.unwrap_or("false"), err, "delivery.email-owner", "boolean"));
                    },
                "etag" => {
                        request_delivery_init(&mut request);
                        request.etag = Some(value.unwrap_or("").to_string());
                    },
                "owner-profile-id" => {
                        request_delivery_init(&mut request);
                        request.owner_profile_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_delivery_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "last-modified-time" => {
                        request_delivery_init(&mut request);
                        request.last_modified_time = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_delivery_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                "type" => {
                        request_delivery_init(&mut request);
                        request.type_ = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.start-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.kind" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.end-date" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.date-range.relative-date-range" => {
                        request_floodlight_criteria_date_range_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.kind" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.value" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.dimension-name" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.etag" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.match-type" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.floodlight-config-id.id" => {
                        request_floodlight_criteria_floodlight_config_id_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().floodlight_config_id.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "floodlight-criteria.report-properties.include-unattributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-unattributed-cookie-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_unattributed_cookie_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-unattributed-cookie-conversions", "boolean"));
                    },
                "floodlight-criteria.report-properties.include-attributed-ip-conversions" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        request.floodlight_criteria.as_mut().unwrap().report_properties.as_mut().unwrap().include_attributed_ip_conversions = Some(arg_from_str(value.unwrap_or("false"), err, "floodlight-criteria.report-properties.include-attributed-ip-conversions", "boolean"));
                    },
                "floodlight-criteria.metric-names" => {
                        request_floodlight_criteria_report_properties_init(&mut request);
                        if request.floodlight_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.floodlight_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.floodlight_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.pivoted" => {
                        request_cross_dimension_reach_criteria_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().pivoted = Some(arg_from_str(value.unwrap_or("false"), err, "cross-dimension-reach-criteria.pivoted", "boolean"));
                    },
                "cross-dimension-reach-criteria.date-range.start-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().start_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.kind" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.end-date" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().end_date = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.date-range.relative-date-range" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().date_range.as_mut().unwrap().relative_date_range = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.dimension" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        request.cross_dimension_reach_criteria.as_mut().unwrap().dimension = Some(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.overlap-metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().overlap_metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "cross-dimension-reach-criteria.metric-names" => {
                        request_cross_dimension_reach_criteria_date_range_init(&mut request);
                        if request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.is_none() {
                           request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names = Some(Default::default());
                        }
                                        request.cross_dimension_reach_criteria.as_mut().unwrap().metric_names.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active", "activities", "clicks-lookback-window", "criteria", "cross-dimension-reach-criteria", "custom-rich-media-events", "date-range", "delivery", "dimension", "dimension-name", "email-owner", "email-owner-delivery-type", "enable-all-dimension-combinations", "end-date", "etag", "every", "expiration-date", "file-name", "floodlight-config-id", "floodlight-criteria", "format", "id", "impressions-lookback-window", "include-attributed-ip-conversions", "include-unattributed-cookie-conversions", "include-unattributed-ip-conversions", "kind", "last-modified-time", "match-type", "maximum-click-interactions", "maximum-impression-interactions", "maximum-interaction-gap", "message", "metric-names", "name", "overlap-metric-names", "owner-profile-id", "path-to-conversion-criteria", "pivot-on-interaction-path", "pivoted", "reach-by-frequency-metric-names", "reach-criteria", "relative-date-range", "repeats", "repeats-on-week-days", "report-properties", "runs-on-day-of-month", "schedule", "start-date", "sub-account-id", "type", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.reports().update(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("report-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sites_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.sites().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sites_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active-view-opt-out", "additional-key-values", "approved", "click-duration", "creative-settings", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disable-brand-safe-ads", "disable-new-cookie", "etag", "i-frame-footer", "i-frame-header", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "lookback-configuration", "match-type", "name", "post-impression-activities-duration", "site-settings", "subaccount-id", "tag-setting", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.sites().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sites_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.sites().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "unmapped-site" => {
                    call = call.unmapped_site(arg_from_str(value.unwrap_or("false"), err, "unmapped-site", "boolean"));
                },
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "directory-site-ids" => {
                    call = call.add_directory_site_ids(value.unwrap_or(""));
                },
                "campaign-ids" => {
                    call = call.add_campaign_ids(value.unwrap_or(""));
                },
                "approved" => {
                    call = call.approved(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                },
                "ad-words-site" => {
                    call = call.ad_words_site(arg_from_str(value.unwrap_or("false"), err, "ad-words-site", "boolean"));
                },
                "accepts-publisher-paid-placements" => {
                    call = call.accepts_publisher_paid_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-publisher-paid-placements", "boolean"));
                },
                "accepts-interstitial-placements" => {
                    call = call.accepts_interstitial_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-interstitial-placements", "boolean"));
                },
                "accepts-in-stream-video-placements" => {
                    call = call.accepts_in_stream_video_placements(arg_from_str(value.unwrap_or("false"), err, "accepts-in-stream-video-placements", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["accepts-interstitial-placements", "accepts-publisher-paid-placements", "search-string", "subaccount-id", "directory-site-ids", "sort-field", "ids", "max-results", "page-token", "unmapped-site", "accepts-in-stream-video-placements", "ad-words-site", "campaign-ids", "approved", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sites_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active-view-opt-out", "additional-key-values", "approved", "click-duration", "creative-settings", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disable-brand-safe-ads", "disable-new-cookie", "etag", "i-frame-footer", "i-frame-header", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "lookback-configuration", "match-type", "name", "post-impression-activities-duration", "site-settings", "subaccount-id", "tag-setting", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.sites().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sites_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Site::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            fn request_directory_site_id_dimension_value_init(request: &mut api::Site) {
                if request.directory_site_id_dimension_value.is_none() {
                    request.directory_site_id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_id_dimension_value_init(request: &mut api::Site) {
                if request.id_dimension_value.is_none() {
                    request.id_dimension_value = Some(Default::default());
                }
            }
            
            fn request_site_settings_creative_settings_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().creative_settings.is_none() {
                    request.site_settings.as_mut().unwrap().creative_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_init(request: &mut api::Site) {
                if request.site_settings.is_none() {
                    request.site_settings = Some(Default::default());
                }
            }
            
            fn request_site_settings_lookback_configuration_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().lookback_configuration.is_none() {
                    request.site_settings.as_mut().unwrap().lookback_configuration = Some(Default::default());
                }
            }
            
            fn request_site_settings_tag_setting_init(request: &mut api::Site) {
                request_site_settings_init(request);
                if request.site_settings.as_mut().unwrap().tag_setting.is_none() {
                    request.site_settings.as_mut().unwrap().tag_setting = Some(Default::default());
                }
            }
            
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.kind" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.value" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.dimension-name" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.etag" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.match-type" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id-dimension-value.id" => {
                        request_directory_site_id_dimension_value_init(&mut request);
                        request.directory_site_id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.disable-brand-safe-ads" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_brand_safe_ads = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-brand-safe-ads", "boolean"));
                    },
                "site-settings.active-view-opt-out" => {
                        request_site_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().active_view_opt_out = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.active-view-opt-out", "boolean"));
                    },
                "site-settings.lookback-configuration.click-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().click_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.click-duration", "integer"));
                    },
                "site-settings.lookback-configuration.post-impression-activities-duration" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().lookback_configuration.as_mut().unwrap().post_impression_activities_duration = Some(arg_from_str(value.unwrap_or("-0"), err, "site-settings.lookback-configuration.post-impression-activities-duration", "integer"));
                    },
                "site-settings.disable-new-cookie" => {
                        request_site_settings_lookback_configuration_init(&mut request);
                        request.site_settings.as_mut().unwrap().disable_new_cookie = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.disable-new-cookie", "boolean"));
                    },
                "site-settings.tag-setting.include-click-through-urls" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_through_urls = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-through-urls", "boolean"));
                    },
                "site-settings.tag-setting.include-click-tracking" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().include_click_tracking = Some(arg_from_str(value.unwrap_or("false"), err, "site-settings.tag-setting.include-click-tracking", "boolean"));
                    },
                "site-settings.tag-setting.additional-key-values" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().additional_key_values = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.tag-setting.keyword-option" => {
                        request_site_settings_tag_setting_init(&mut request);
                        request.site_settings.as_mut().unwrap().tag_setting.as_mut().unwrap().keyword_option = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-header" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_header = Some(value.unwrap_or("").to_string());
                    },
                "site-settings.creative-settings.i-frame-footer" => {
                        request_site_settings_creative_settings_init(&mut request);
                        request.site_settings.as_mut().unwrap().creative_settings.as_mut().unwrap().i_frame_footer = Some(value.unwrap_or("").to_string());
                    },
                "approved" => {
                        request_site_settings_init(&mut request);
                        request.approved = Some(arg_from_str(value.unwrap_or("false"), err, "approved", "boolean"));
                    },
                "id-dimension-value.kind" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().kind = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.value" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().value = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.dimension-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().dimension_name = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.etag" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().etag = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.match-type" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().match_type = Some(value.unwrap_or("").to_string());
                    },
                "id-dimension-value.id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id_dimension_value.as_mut().unwrap().id = Some(value.unwrap_or("").to_string());
                    },
                "key-name" => {
                        request_id_dimension_value_init(&mut request);
                        request.key_name = Some(value.unwrap_or("").to_string());
                    },
                "directory-site-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.directory_site_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request_id_dimension_value_init(&mut request);
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request_id_dimension_value_init(&mut request);
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "active-view-opt-out", "additional-key-values", "approved", "click-duration", "creative-settings", "dimension-name", "directory-site-id", "directory-site-id-dimension-value", "disable-brand-safe-ads", "disable-new-cookie", "etag", "i-frame-footer", "i-frame-header", "id", "id-dimension-value", "include-click-through-urls", "include-click-tracking", "key-name", "keyword-option", "kind", "lookback-configuration", "match-type", "name", "post-impression-activities-duration", "site-settings", "subaccount-id", "tag-setting", "value"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.sites().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sizes_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.sizes().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sizes_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Size::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "width" => {
                        request.width = Some(arg_from_str(value.unwrap_or("-0"), err, "width", "integer"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "iab" => {
                        request.iab = Some(arg_from_str(value.unwrap_or("false"), err, "iab", "boolean"));
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "height" => {
                        request.height = Some(arg_from_str(value.unwrap_or("-0"), err, "height", "integer"));
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["height", "iab", "id", "kind", "width"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.sizes().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _sizes_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.sizes().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "width" => {
                    call = call.width(arg_from_str(value.unwrap_or("-0"), err, "width", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "iab-standard" => {
                    call = call.iab_standard(arg_from_str(value.unwrap_or("false"), err, "iab-standard", "boolean"));
                },
                "height" => {
                    call = call.height(arg_from_str(value.unwrap_or("-0"), err, "height", "integer"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["iab-standard", "width", "ids", "height"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _subaccounts_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.subaccounts().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _subaccounts_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "available-permission-ids", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.subaccounts().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _subaccounts_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.subaccounts().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "sort-field", "ids", "max-results", "page-token", "sort-order"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _subaccounts_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "available-permission-ids", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.subaccounts().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _subaccounts_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::Subaccount::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "available-permission-ids" => {
                        if request.available_permission_ids.is_none() {
                           request.available_permission_ids = Some(Default::default());
                        }
                                        request.available_permission_ids.as_mut().unwrap().push(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "available-permission-ids", "id", "kind", "name"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.subaccounts().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _targetable_remarketing_lists_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.targetable_remarketing_lists().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _targetable_remarketing_lists_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.targetable_remarketing_lists().list(opt.value_of("profile-id").unwrap_or(""), opt.value_of("advertiser-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "name" => {
                    call = call.name(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "active" => {
                    call = call.active(arg_from_str(value.unwrap_or("false"), err, "active", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["name", "sort-field", "max-results", "page-token", "sort-order", "active"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_profiles_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_profiles().get(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_profiles_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_profiles().list();
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_role_permission_groups_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_role_permission_groups().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_role_permission_groups_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_role_permission_groups().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_role_permissions_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_role_permissions().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_role_permissions_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_role_permissions().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["ids"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_delete(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_roles().delete(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok(mut response) => {
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_get(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_roles().get(opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_insert(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "default-user-role", "id", "kind", "name", "parent-user-role-id", "subaccount-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.user_roles().insert(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_list(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        let mut call = self.hub.user_roles().list(opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                "subaccount-id" => {
                    call = call.subaccount_id(value.unwrap_or(""));
                },
                "sort-order" => {
                    call = call.sort_order(value.unwrap_or(""));
                },
                "sort-field" => {
                    call = call.sort_field(value.unwrap_or(""));
                },
                "search-string" => {
                    call = call.search_string(value.unwrap_or(""));
                },
                "page-token" => {
                    call = call.page_token(value.unwrap_or(""));
                },
                "max-results" => {
                    call = call.max_results(arg_from_str(value.unwrap_or("-0"), err, "max-results", "integer"));
                },
                "ids" => {
                    call = call.add_ids(value.unwrap_or(""));
                },
                "account-user-role-only" => {
                    call = call.account_user_role_only(arg_from_str(value.unwrap_or("false"), err, "account-user-role-only", "boolean"));
                },
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &["search-string", "subaccount-id", "sort-field", "ids", "max-results", "page-token", "sort-order", "account-user-role-only"]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_patch(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "default-user-role", "id", "kind", "name", "parent-user-role-id", "subaccount-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.user_roles().patch(request, opt.value_of("profile-id").unwrap_or(""), opt.value_of("id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _user_roles_update(&self, opt: &ArgMatches<'n, 'a>, dry_run: bool, err: &mut InvalidOptionsError)
                                                    -> Result<(), DoitError> {
        
        let mut request = api::UserRole::default();
        let mut field_cursor = FieldCursor::default();
        for kvarg in opt.values_of("kv").unwrap_or(Vec::new()).iter() {
            let last_errc = err.issues.len();
            let (key, value) = parse_kv_arg(&*kvarg, err, false);
            let mut temp_cursor = field_cursor.clone();
            if let Err(field_err) = temp_cursor.set(&*key) {
                err.issues.push(field_err);
            }
            if value.is_none() {
                field_cursor = temp_cursor.clone();
                if err.issues.len() > last_errc {
                    err.issues.remove(last_errc);
                }
                continue;
            }
            match &temp_cursor.to_string()[..] {
                "default-user-role" => {
                        request.default_user_role = Some(arg_from_str(value.unwrap_or("false"), err, "default-user-role", "boolean"));
                    },
                "kind" => {
                        request.kind = Some(value.unwrap_or("").to_string());
                    },
                "subaccount-id" => {
                        request.subaccount_id = Some(value.unwrap_or("").to_string());
                    },
                "name" => {
                        request.name = Some(value.unwrap_or("").to_string());
                    },
                "parent-user-role-id" => {
                        request.parent_user_role_id = Some(value.unwrap_or("").to_string());
                    },
                "id" => {
                        request.id = Some(value.unwrap_or("").to_string());
                    },
                "account-id" => {
                        request.account_id = Some(value.unwrap_or("").to_string());
                    },
                _ => {
                    let suggestion = FieldCursor::did_you_mean(key, &vec!["account-id", "default-user-role", "id", "kind", "name", "parent-user-role-id", "subaccount-id"]);
                    err.issues.push(CLIError::Field(FieldError::Unknown(temp_cursor.to_string(), suggestion, value.map(|v| v.to_string()))));
                }
            }
        }
        let mut call = self.hub.user_roles().update(request, opt.value_of("profile-id").unwrap_or(""));
        for parg in opt.values_of("v").unwrap_or(Vec::new()).iter() {
            let (key, value) = parse_kv_arg(&*parg, err, false);
            match key {
                _ => {
                    let mut found = false;
                    for param in &self.gp {
                        if key == *param {
                            found = true;
                            call = call.param(self.gpm.iter().find(|t| t.0 == key).unwrap_or(&("", key)).1, value.unwrap_or("unset"));
                            break;
                        }
                    }
                    if !found {
                        err.issues.push(CLIError::UnknownParameter(key.to_string(),
                                                Vec::new() + &self.gp + &[]
                                                            ));
                    }
                }
            }
        }
        let protocol = CallType::Standard;
        if dry_run {
            Ok(())
        } else {
            assert!(err.issues.len() == 0);
            for scope in self.opt.values_of("url").unwrap_or(Vec::new()).iter() {
                call = call.add_scope(scope);
            }
            let mut ostream = match writer_from_opts(opt.value_of("out")) {
                Ok(mut f) => f,
                Err(io_err) => return Err(DoitError::IoError(opt.value_of("out").unwrap_or("-").to_string(), io_err)),
            };
            match match protocol {
                CallType::Standard => call.doit(),
                _ => unreachable!()
            } {
                Err(api_err) => Err(DoitError::ApiError(api_err)),
                Ok((mut response, output_schema)) => {
                    let mut value = json::value::to_value(&output_schema);
                    remove_json_null_values(&mut value);
                    serde::json::to_writer_pretty(&mut ostream, &value).unwrap();
                    Ok(())
                }
            }
        }
    }

    fn _doit(&self, dry_run: bool) -> Result<Result<(), DoitError>, Option<InvalidOptionsError>> {
        let mut err = InvalidOptionsError::new();
        let mut call_result: Result<(), DoitError> = Ok(());
        let mut err_opt: Option<InvalidOptionsError> = None;
        match self.opt.subcommand() {
            ("account-active-ad-summaries", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._account_active_ad_summaries_get(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("account-active-ad-summaries".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("account-permission-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._account_permission_groups_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._account_permission_groups_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("account-permission-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("account-permissions", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._account_permissions_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._account_permissions_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("account-permissions".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("account-user-profiles", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._account_user_profiles_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._account_user_profiles_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._account_user_profiles_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._account_user_profiles_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._account_user_profiles_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("account-user-profiles".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("accounts", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._accounts_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._accounts_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._accounts_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._accounts_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("accounts".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("ads", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._ads_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._ads_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._ads_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._ads_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._ads_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("ads".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("advertiser-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._advertiser_groups_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._advertiser_groups_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._advertiser_groups_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._advertiser_groups_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._advertiser_groups_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._advertiser_groups_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("advertiser-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("advertisers", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._advertisers_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._advertisers_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._advertisers_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._advertisers_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._advertisers_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("advertisers".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("browsers", Some(opt)) => {
                match opt.subcommand() {
                    ("list", Some(opt)) => {
                        call_result = self._browsers_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("browsers".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("campaign-creative-associations", Some(opt)) => {
                match opt.subcommand() {
                    ("insert", Some(opt)) => {
                        call_result = self._campaign_creative_associations_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._campaign_creative_associations_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("campaign-creative-associations".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("campaigns", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._campaigns_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._campaigns_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._campaigns_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._campaigns_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._campaigns_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("campaigns".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("change-logs", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._change_logs_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._change_logs_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("change-logs".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("cities", Some(opt)) => {
                match opt.subcommand() {
                    ("list", Some(opt)) => {
                        call_result = self._cities_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("cities".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("connection-types", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._connection_types_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._connection_types_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("connection-types".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("content-categories", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._content_categories_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._content_categories_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._content_categories_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._content_categories_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._content_categories_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._content_categories_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("content-categories".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("countries", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._countries_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._countries_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("countries".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("creative-assets", Some(opt)) => {
                match opt.subcommand() {
                    ("insert", Some(opt)) => {
                        call_result = self._creative_assets_insert(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("creative-assets".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("creative-field-values", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._creative_field_values_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._creative_field_values_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._creative_field_values_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._creative_field_values_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._creative_field_values_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._creative_field_values_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("creative-field-values".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("creative-fields", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._creative_fields_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._creative_fields_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._creative_fields_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._creative_fields_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._creative_fields_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._creative_fields_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("creative-fields".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("creative-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._creative_groups_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._creative_groups_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._creative_groups_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._creative_groups_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._creative_groups_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("creative-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("creatives", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._creatives_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._creatives_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._creatives_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._creatives_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._creatives_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("creatives".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("dimension-values", Some(opt)) => {
                match opt.subcommand() {
                    ("query", Some(opt)) => {
                        call_result = self._dimension_values_query(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("dimension-values".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("directory-site-contacts", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._directory_site_contacts_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._directory_site_contacts_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("directory-site-contacts".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("directory-sites", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._directory_sites_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._directory_sites_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._directory_sites_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("directory-sites".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("event-tags", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._event_tags_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._event_tags_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._event_tags_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._event_tags_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._event_tags_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._event_tags_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("event-tags".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("files", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._files_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._files_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("files".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("floodlight-activities", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._floodlight_activities_delete(opt, dry_run, &mut err);
                    },
                    ("generatetag", Some(opt)) => {
                        call_result = self._floodlight_activities_generatetag(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._floodlight_activities_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._floodlight_activities_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._floodlight_activities_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._floodlight_activities_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._floodlight_activities_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("floodlight-activities".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("floodlight-activity-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._floodlight_activity_groups_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("floodlight-activity-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("floodlight-configurations", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._floodlight_configurations_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._floodlight_configurations_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._floodlight_configurations_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._floodlight_configurations_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("floodlight-configurations".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("inventory-items", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._inventory_items_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._inventory_items_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("inventory-items".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("landing-pages", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._landing_pages_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._landing_pages_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._landing_pages_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._landing_pages_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._landing_pages_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._landing_pages_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("landing-pages".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("metros", Some(opt)) => {
                match opt.subcommand() {
                    ("list", Some(opt)) => {
                        call_result = self._metros_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("metros".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("mobile-carriers", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._mobile_carriers_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._mobile_carriers_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("mobile-carriers".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("operating-system-versions", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._operating_system_versions_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._operating_system_versions_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("operating-system-versions".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("operating-systems", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._operating_systems_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._operating_systems_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("operating-systems".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("order-documents", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._order_documents_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._order_documents_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("order-documents".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("orders", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._orders_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._orders_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("orders".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("placement-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._placement_groups_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._placement_groups_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._placement_groups_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._placement_groups_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._placement_groups_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("placement-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("placement-strategies", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._placement_strategies_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._placement_strategies_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._placement_strategies_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._placement_strategies_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._placement_strategies_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._placement_strategies_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("placement-strategies".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("placements", Some(opt)) => {
                match opt.subcommand() {
                    ("generatetags", Some(opt)) => {
                        call_result = self._placements_generatetags(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._placements_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._placements_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._placements_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._placements_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._placements_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("placements".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("platform-types", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._platform_types_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._platform_types_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("platform-types".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("postal-codes", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._postal_codes_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._postal_codes_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("postal-codes".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("projects", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._projects_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._projects_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("projects".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("regions", Some(opt)) => {
                match opt.subcommand() {
                    ("list", Some(opt)) => {
                        call_result = self._regions_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("regions".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("remarketing-list-shares", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._remarketing_list_shares_get(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._remarketing_list_shares_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._remarketing_list_shares_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("remarketing-list-shares".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("remarketing-lists", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._remarketing_lists_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._remarketing_lists_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._remarketing_lists_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._remarketing_lists_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._remarketing_lists_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("remarketing-lists".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("reports", Some(opt)) => {
                match opt.subcommand() {
                    ("compatible-fields-query", Some(opt)) => {
                        call_result = self._reports_compatible_fields_query(opt, dry_run, &mut err);
                    },
                    ("delete", Some(opt)) => {
                        call_result = self._reports_delete(opt, dry_run, &mut err);
                    },
                    ("files-get", Some(opt)) => {
                        call_result = self._reports_files_get(opt, dry_run, &mut err);
                    },
                    ("files-list", Some(opt)) => {
                        call_result = self._reports_files_list(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._reports_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._reports_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._reports_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._reports_patch(opt, dry_run, &mut err);
                    },
                    ("run", Some(opt)) => {
                        call_result = self._reports_run(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._reports_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("reports".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("sites", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._sites_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._sites_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._sites_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._sites_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._sites_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("sites".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("sizes", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._sizes_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._sizes_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._sizes_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("sizes".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("subaccounts", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._subaccounts_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._subaccounts_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._subaccounts_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._subaccounts_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._subaccounts_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("subaccounts".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("targetable-remarketing-lists", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._targetable_remarketing_lists_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._targetable_remarketing_lists_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("targetable-remarketing-lists".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("user-profiles", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._user_profiles_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._user_profiles_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("user-profiles".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("user-role-permission-groups", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._user_role_permission_groups_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._user_role_permission_groups_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("user-role-permission-groups".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("user-role-permissions", Some(opt)) => {
                match opt.subcommand() {
                    ("get", Some(opt)) => {
                        call_result = self._user_role_permissions_get(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._user_role_permissions_list(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("user-role-permissions".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            ("user-roles", Some(opt)) => {
                match opt.subcommand() {
                    ("delete", Some(opt)) => {
                        call_result = self._user_roles_delete(opt, dry_run, &mut err);
                    },
                    ("get", Some(opt)) => {
                        call_result = self._user_roles_get(opt, dry_run, &mut err);
                    },
                    ("insert", Some(opt)) => {
                        call_result = self._user_roles_insert(opt, dry_run, &mut err);
                    },
                    ("list", Some(opt)) => {
                        call_result = self._user_roles_list(opt, dry_run, &mut err);
                    },
                    ("patch", Some(opt)) => {
                        call_result = self._user_roles_patch(opt, dry_run, &mut err);
                    },
                    ("update", Some(opt)) => {
                        call_result = self._user_roles_update(opt, dry_run, &mut err);
                    },
                    _ => {
                        err.issues.push(CLIError::MissingMethodError("user-roles".to_string()));
                        writeln!(io::stderr(), "{}\n", opt.usage()).ok();
                    }
                }
            },
            _ => {
                err.issues.push(CLIError::MissingCommandError);
                writeln!(io::stderr(), "{}\n", self.opt.usage()).ok();
            }
        }

        if dry_run {
            if err.issues.len() > 0 {
                err_opt = Some(err);
            }
            Err(err_opt)
        } else {
            Ok(call_result)
        }
    }

    // Please note that this call will fail if any part of the opt can't be handled
    fn new(opt: ArgMatches<'a, 'n>) -> Result<Engine<'a, 'n>, InvalidOptionsError> {
        let (config_dir, secret) = {
            let config_dir = match cmn::assure_config_dir_exists(opt.value_of("folder").unwrap_or("~/.google-service-cli")) {
                Err(e) => return Err(InvalidOptionsError::single(e, 3)),
                Ok(p) => p,
            };

            match cmn::application_secret_from_directory(&config_dir, "dfareporting2d1-secret.json", 
                                                         "{\"installed\":{\"auth_uri\":\"https://accounts.google.com/o/oauth2/auth\",\"client_secret\":\"hCsslbCUyfehWMmbkG8vTYxG\",\"token_uri\":\"https://accounts.google.com/o/oauth2/token\",\"client_email\":\"\",\"redirect_uris\":[\"urn:ietf:wg:oauth:2.0:oob\",\"oob\"],\"client_x509_cert_url\":\"\",\"client_id\":\"620010449518-9ngf7o4dhs0dka470npqvor6dc5lqb9b.apps.googleusercontent.com\",\"auth_provider_x509_cert_url\":\"https://www.googleapis.com/oauth2/v1/certs\"}}") {
                Ok(secret) => (config_dir, secret),
                Err(e) => return Err(InvalidOptionsError::single(e, 4))
            }
        };

        let auth = Authenticator::new(  &secret, DefaultAuthenticatorDelegate,
                                        if opt.is_present("debug-auth") {
                                            hyper::Client::with_connector(mock::TeeConnector {
                                                    connector: hyper::net::HttpConnector(None) 
                                                })
                                        } else {
                                            hyper::Client::new()
                                        },
                                        JsonTokenStorage {
                                          program_name: "dfareporting2d1",
                                          db_dir: config_dir.clone(),
                                        }, None);

        let client = 
            if opt.is_present("debug") {
                hyper::Client::with_connector(mock::TeeConnector {
                        connector: hyper::net::HttpConnector(None) 
                    })
            } else {
                hyper::Client::new()
            };
        let engine = Engine {
            opt: opt,
            hub: api::Dfareporting::new(client, auth),
            gp: vec!["alt", "fields", "key", "oauth-token", "pretty-print", "quota-user", "user-ip"],
            gpm: vec![
                    ("oauth-token", "oauth_token"),
                    ("pretty-print", "prettyPrint"),
                    ("quota-user", "quotaUser"),
                    ("user-ip", "userIp"),
                ]
        };

        match engine._doit(true) {
            Err(Some(err)) => Err(err),
            Err(None)      => Ok(engine),
            Ok(_)          => unreachable!(),
        }
    }

    fn doit(&self) -> Result<(), DoitError> {
        match self._doit(false) {
            Ok(res) => res,
            Err(_) => unreachable!(),
        }
    }
}

fn main() {
    let upload_value_names = ["mode", "file"];
    let arg_data = [
        ("account-active-ad-summaries", "methods: 'get'", vec![
            ("get",  
                    Some(r##"Gets the account's active ad summary by account ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-active-ad-summaries_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"summary-account-id"##),
                     None,
                     Some(r##"Account ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("account-permission-groups", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one account permission group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-permission-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Account permission group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves the list of account permission groups."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-permission-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("account-permissions", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one account permission by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-permissions_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Account permission ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves the list of account permissions."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-permissions_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("account-user-profiles", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one account user profile by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-user-profiles_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new account user profile."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-user-profiles_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of account user profiles, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-user-profiles_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing account user profile. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-user-profiles_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing account user profile."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/account-user-profiles_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("accounts", "methods: 'get', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one account by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/accounts_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Account ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves the list of accounts, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/accounts_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing account. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/accounts_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Account ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing account."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/accounts_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("ads", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one ad by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/ads_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Ad ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new ad."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/ads_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of ads, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/ads_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing ad. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/ads_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Ad ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing ad."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/ads_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("advertiser-groups", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing advertiser group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Advertiser group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one advertiser group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Advertiser group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new advertiser group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of advertiser groups, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing advertiser group. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Advertiser group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing advertiser group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertiser-groups_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("advertisers", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one advertiser by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertisers_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Advertiser ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new advertiser."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertisers_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of advertisers, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertisers_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing advertiser. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertisers_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Advertiser ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing advertiser."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/advertisers_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("browsers", "methods: 'list'", vec![
            ("list",  
                    Some(r##"Retrieves a list of browsers."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/browsers_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("campaign-creative-associations", "methods: 'insert' and 'list'", vec![
            ("insert",  
                    Some(r##"Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaign-creative-associations_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Campaign ID in this association."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves the list of creative IDs associated with the specified campaign."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaign-creative-associations_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Campaign ID in this association."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("campaigns", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one campaign by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaigns_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new campaign."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaigns_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"default-landing-page-name"##),
                     None,
                     Some(r##"Default landing page name for this new campaign. Must be less than 256 characters long."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"default-landing-page-url"##),
                     None,
                     Some(r##"Default landing page URL for this new campaign."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of campaigns, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaigns_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing campaign. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaigns_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing campaign."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/campaigns_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("change-logs", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one change log by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/change-logs_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Change log ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of change logs."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/change-logs_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("cities", "methods: 'list'", vec![
            ("list",  
                    Some(r##"Retrieves a list of cities, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/cities_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("connection-types", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one connection type by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/connection-types_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Connection type ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of connection types."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/connection-types_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("content-categories", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing content category."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Content category ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one content category by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Content category ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new content category."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of content categories, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing content category. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Content category ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing content category."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/content-categories_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("countries", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one country by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/countries_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"dart-id"##),
                     None,
                     Some(r##"Country DART ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of countries."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/countries_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("creative-assets", "methods: 'insert'", vec![
            ("insert",  
                    Some(r##"Inserts a new creative asset."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-assets_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"advertiser-id"##),
                     None,
                     Some(r##"Advertiser ID of this creative. This is a required field."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"mode"##),
                     Some(r##"u"##),
                     Some(r##"Specify the upload protocol (simple|resumable) and the file to upload"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("creative-field-values", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing creative field value."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field Value ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one creative field value by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field Value ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new creative field value."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of creative field values, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing creative field value. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field Value ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing creative field value."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-field-values_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"creative-field-id"##),
                     None,
                     Some(r##"Creative field ID for this creative field value."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("creative-fields", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing creative field."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one creative field by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new creative field."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of creative fields, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing creative field. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative Field ID"##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing creative field."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-fields_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("creative-groups", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one creative group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new creative group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-groups_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of creative groups, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing creative group. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-groups_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing creative group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creative-groups_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("creatives", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one creative by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creatives_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new creative."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creatives_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of creatives, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creatives_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing creative. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creatives_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Creative ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing creative."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/creatives_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("dimension-values", "methods: 'query'", vec![
            ("query",  
                    Some(r##"Retrieves list of report dimension values for a list of filters."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/dimension-values_query",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("directory-site-contacts", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one directory site contact by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/directory-site-contacts_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Directory site contact ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of directory site contacts, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/directory-site-contacts_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("directory-sites", "methods: 'get', 'insert' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one directory site by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/directory-sites_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Directory site ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new directory site."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/directory-sites_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of directory sites, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/directory-sites_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("event-tags", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing event tag."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Event tag ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one event tag by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Event tag ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new event tag."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of event tags, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing event tag. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Event tag ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing event tag."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/event-tags_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("files", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Retrieves a report file by its report ID and file ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/files_get",
                  vec![
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"file-id"##),
                     None,
                     Some(r##"The ID of the report file."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Lists files for a user profile."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/files_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("floodlight-activities", "methods: 'delete', 'generatetag', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing floodlight activity."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("generatetag",  
                    Some(r##"Generates a tag for a floodlight activity."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_generatetag",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("get",  
                    Some(r##"Gets one floodlight activity by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new floodlight activity."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of floodlight activities, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing floodlight activity. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing floodlight activity."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activities_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("floodlight-activity-groups", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing floodlight activity group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity Group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one floodlight activity group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity Group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new floodlight activity group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of floodlight activity groups, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing floodlight activity group. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight activity Group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing floodlight activity group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-activity-groups_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("floodlight-configurations", "methods: 'get', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one floodlight configuration by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-configurations_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight configuration ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of floodlight configurations, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-configurations_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing floodlight configuration. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-configurations_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Floodlight configuration ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing floodlight configuration."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/floodlight-configurations_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("inventory-items", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one inventory item by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/inventory-items_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for order documents."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Inventory item ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of inventory items, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/inventory-items_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for order documents."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("landing-pages", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing campaign landing page."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Landing page ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one campaign landing page by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Landing page ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new landing page for the specified campaign."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves the list of landing pages for the specified campaign."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing campaign landing page. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Landing page ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing campaign landing page."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/landing-pages_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"campaign-id"##),
                     None,
                     Some(r##"Landing page campaign ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("metros", "methods: 'list'", vec![
            ("list",  
                    Some(r##"Retrieves a list of metros."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/metros_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("mobile-carriers", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one mobile carrier by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/mobile-carriers_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Mobile carrier ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of mobile carriers."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/mobile-carriers_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("operating-system-versions", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one operating system version by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/operating-system-versions_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Operating system version ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of operating system versions."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/operating-system-versions_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("operating-systems", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one operating system by DART ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/operating-systems_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"dart-id"##),
                     None,
                     Some(r##"Operating system DART ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of operating systems."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/operating-systems_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("order-documents", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one order document by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/order-documents_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for order documents."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Order document ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of order documents, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/order-documents_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for order documents."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("orders", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one order by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/orders_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for orders."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Order ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of orders, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/orders_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"project-id"##),
                     None,
                     Some(r##"Project ID for orders."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("placement-groups", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one placement group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new placement group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-groups_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of placement groups, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing placement group. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-groups_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing placement group."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-groups_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("placement-strategies", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing placement strategy."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement strategy ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one placement strategy by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement strategy ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new placement strategy."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of placement strategies, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing placement strategy. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement strategy ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing placement strategy."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placement-strategies_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("placements", "methods: 'generatetags', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("generatetags",  
                    Some(r##"Generates tags for a placement."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_generatetags",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("get",  
                    Some(r##"Gets one placement by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new placement."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of placements, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing placement. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Placement ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing placement."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/placements_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("platform-types", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one platform type by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/platform-types_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Platform type ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of platform types."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/platform-types_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("postal-codes", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one postal code by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/postal-codes_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"code"##),
                     None,
                     Some(r##"Postal code ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of postal codes."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/postal-codes_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("projects", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one project by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/projects_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Project ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of projects, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/projects_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("regions", "methods: 'list'", vec![
            ("list",  
                    Some(r##"Retrieves a list of regions."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/regions_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("remarketing-list-shares", "methods: 'get', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one remarketing list share by remarketing list ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-list-shares_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"remarketing-list-id"##),
                     None,
                     Some(r##"Remarketing list ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing remarketing list share. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-list-shares_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"remarketing-list-id"##),
                     None,
                     Some(r##"Remarketing list ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing remarketing list share."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-list-shares_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("remarketing-lists", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one remarketing list by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-lists_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Remarketing list ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new remarketing list."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-lists_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of remarketing lists, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-lists_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"advertiser-id"##),
                     None,
                     Some(r##"Select only remarketing lists owned by this advertiser."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing remarketing list. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-lists_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Remarketing list ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing remarketing list."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/remarketing-lists_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("reports", "methods: 'compatible-fields-query', 'delete', 'files-get', 'files-list', 'get', 'insert', 'list', 'patch', 'run' and 'update'", vec![
            ("compatible-fields-query",  
                    Some(r##"Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_compatible-fields-query",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("delete",  
                    Some(r##"Deletes a report by its ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("files-get",  
                    Some(r##"Retrieves a report file."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_files-get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"file-id"##),
                     None,
                     Some(r##"The ID of the report file."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("files-list",  
                    Some(r##"Lists files for a report."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_files-list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the parent report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("get",  
                    Some(r##"Retrieves a report by its ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Creates a report."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves list of reports."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates a report. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("run",  
                    Some(r##"Runs a report."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_run",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates a report."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/reports_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The DFA user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"report-id"##),
                     None,
                     Some(r##"The ID of the report."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("sites", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one site by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sites_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Site ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new site."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sites_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of sites, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sites_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing site. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sites_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Site ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing site."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sites_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("sizes", "methods: 'get', 'insert' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one size by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sizes_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Size ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new size."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sizes_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of sizes, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/sizes_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("subaccounts", "methods: 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("get",  
                    Some(r##"Gets one subaccount by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/subaccounts_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Subaccount ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new subaccount."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/subaccounts_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Gets a list of subaccounts, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/subaccounts_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing subaccount. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/subaccounts_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Subaccount ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing subaccount."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/subaccounts_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("targetable-remarketing-lists", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one remarketing list by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/targetable-remarketing-lists_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"Remarketing list ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of targetable remarketing lists, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/targetable-remarketing-lists_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"advertiser-id"##),
                     None,
                     Some(r##"Select only targetable remarketing lists targetable by these advertisers."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("user-profiles", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one user profile by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-profiles_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"The user profile ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves list of user profiles for a user."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-profiles_list",
                  vec![
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("user-role-permission-groups", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one user role permission group by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-role-permission-groups_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User role permission group ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Gets a list of all supported user role permission groups."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-role-permission-groups_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("user-role-permissions", "methods: 'get' and 'list'", vec![
            ("get",  
                    Some(r##"Gets one user role permission by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-role-permissions_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User role permission ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Gets a list of user role permissions, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-role-permissions_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
        ("user-roles", "methods: 'delete', 'get', 'insert', 'list', 'patch' and 'update'", vec![
            ("delete",  
                    Some(r##"Deletes an existing user role."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_delete",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User role ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
                  ]),
            ("get",  
                    Some(r##"Gets one user role by ID."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_get",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User role ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("insert",  
                    Some(r##"Inserts a new user role."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_insert",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("list",  
                    Some(r##"Retrieves a list of user roles, possibly filtered."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_list",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("patch",  
                    Some(r##"Updates an existing user role. This method supports patch semantics."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_patch",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"id"##),
                     None,
                     Some(r##"User role ID."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ("update",  
                    Some(r##"Updates an existing user role."##),
                    "Details at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli/user-roles_update",
                  vec![
                    (Some(r##"profile-id"##),
                     None,
                     Some(r##"User profile ID associated with this request."##),
                     Some(true),
                     Some(false)),
        
                    (Some(r##"kv"##),
                     Some(r##"r"##),
                     Some(r##"Set various fields of the request structure, matching the key=value form"##),
                     Some(true),
                     Some(true)),
        
                    (Some(r##"v"##),
                     Some(r##"p"##),
                     Some(r##"Set various optional parameters, matching the key=value form"##),
                     Some(false),
                     Some(true)),
        
                    (Some(r##"out"##),
                     Some(r##"o"##),
                     Some(r##"Specify the file into which to write the program's output"##),
                     Some(false),
                     Some(false)),
                  ]),
            ]),
        
    ];
    
    let mut app = App::new("dfareporting2d1")
           .author("Sebastian Thiel <byronimo@gmail.com>")
           .version("0.2.0+20150326")
           .about("Manage your DoubleClick Campaign Manager ad campaigns and reports.")
           .after_help("All documentation details can be found at http://byron.github.io/google-apis-rs/google_dfareporting2d1_cli")
           .arg(Arg::with_name("url")
                   .long("scope")
                   .help("Specify the authentication a method should be executed in. Each scope requires the user to grant this application permission to use it.If unset, it defaults to the shortest scope url for a particular method.")
                   .multiple(true)
                   .takes_value(true))
           .arg(Arg::with_name("folder")
                   .long("config-dir")
                   .help("A directory into which we will store our persistent data. Defaults to a user-writable directory that we will create during the first invocation.[default: ~/.google-service-cli")
                   .multiple(false)
                   .takes_value(true))
           .arg(Arg::with_name("debug")
                   .long("debug")
                   .help("Output all server communication to standard error. `tx` and `rx` are placed into the same stream.")
                   .multiple(false)
                   .takes_value(false))
           .arg(Arg::with_name("debug-auth")
                   .long("debug-auth")
                   .help("Output all communication related to authentication to standard error. `tx` and `rx` are placed into the same stream.")
                   .multiple(false)
                   .takes_value(false));
           
           for &(main_command_name, ref about, ref subcommands) in arg_data.iter() {
               let mut mcmd = SubCommand::new(main_command_name).about(about);
           
               for &(sub_command_name, ref desc, url_info, ref args) in subcommands {
                   let mut scmd = SubCommand::new(sub_command_name);
                   if let &Some(desc) = desc {
                       scmd = scmd.about(desc);
                   }
                   scmd = scmd.after_help(url_info);
           
                   for &(ref arg_name, ref flag, ref desc, ref required, ref multi) in args {
                       let arg_name_str = 
                           match (arg_name, flag) {
                                   (&Some(an), _       ) => an,
                                   (_        , &Some(f)) => f,
                                    _                    => unreachable!(),
                            };
                       let mut arg = Arg::with_name(arg_name_str);
                       if let &Some(short_flag) = flag {
                           arg = arg.short(short_flag);
                       }
                       if let &Some(desc) = desc {
                           arg = arg.help(desc);
                       }
                       if arg_name.is_some() && flag.is_some() {
                           arg = arg.takes_value(true);
                       }
                       if let &Some(required) = required {
                           arg = arg.required(required);
                       }
                       if let &Some(multi) = multi {
                           arg = arg.multiple(multi);
                       }
                       if arg_name_str == "mode" {
                           arg = arg.number_of_values(2);
                           arg = arg.value_names(&upload_value_names);
           
                           scmd = scmd.arg(Arg::with_name("mime")
                                               .short("m")
                                               .requires("mode")
                                               .required(false)
                                               .help("The file's mime time, like 'application/octet-stream'")
                                               .takes_value(true));
                       }
                       scmd = scmd.arg(arg);
                   }
                   mcmd = mcmd.subcommand(scmd);
               }
               app = app.subcommand(mcmd);
           }
           
        let matches = app.get_matches();

    let debug = matches.is_present("debug");
    match Engine::new(matches) {
        Err(err) => {
            env::set_exit_status(err.exit_code);
            writeln!(io::stderr(), "{}", err).ok();
        },
        Ok(engine) => {
            if let Err(doit_err) = engine.doit() {
                env::set_exit_status(1);
                match doit_err {
                    DoitError::IoError(path, err) => {
                        writeln!(io::stderr(), "Failed to open output file '{}': {}", path, err).ok();
                    },
                    DoitError::ApiError(err) => {
                        if debug {
                            writeln!(io::stderr(), "{:?}", err).ok();
                        } else {
                            writeln!(io::stderr(), "{}", err).ok();
                        }
                    }
                }
            }
        }
    }
}